--lpm_divide DEVICE_FAMILY="Cyclone V" LPM_DREPRESENTATION="UNSIGNED" LPM_NREPRESENTATION="UNSIGNED" LPM_REMAINDERPOSITIVE="TRUE" LPM_WIDTHD=32 LPM_WIDTHN=32 MAXIMIZE_SPEED=6 OPTIMIZE_FOR_SPEED=5 aclr(gnd) clken(vcc) clock(gnd) denom numer quotient remain CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 IGNORE_CARRY_BUFFERS="OFF"
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:03:37:SJ cbx_lpm_abs 2020:11:11:17:03:37:SJ cbx_lpm_add_sub 2020:11:11:17:03:37:SJ cbx_lpm_divide 2020:11:11:17:03:37:SJ cbx_mgl 2020:11:11:17:50:46:SJ cbx_nadder 2020:11:11:17:03:37:SJ cbx_stratix 2020:11:11:17:03:37:SJ cbx_stratixii 2020:11:11:17:03:37:SJ cbx_util_mgl 2020:11:11:17:03:37:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION sign_div_unsign_anh (denominator[31..0], numerator[31..0])
RETURNS ( quotient[31..0], remainder[31..0]);

--synthesis_resources = lut 560 
SUBDESIGN lpm_divide_l4u
( 
	aclr	:	input;
	clken	:	input;
	clock	:	input;
	denom[31..0]	:	input;
	numer[31..0]	:	input;
	quotient[31..0]	:	output;
	remain[31..0]	:	output;
) 
VARIABLE 
	divider : sign_div_unsign_anh;
	const_node_aclr	: NODE;
	const_node_clken	: NODE;
	const_node_clock	: NODE;
	numer_tmp[31..0]	: WIRE;

BEGIN 
	divider.denominator[] = denom[];
	divider.numerator[] = numer_tmp[];
	const_node_aclr = aclr;
	const_node_clken = clken;
	const_node_clock = clock;
	numer_tmp[] = numer[];
	quotient[] = divider.quotient[];
	remain[] = divider.remainder[];
END;
--VALID FILE
