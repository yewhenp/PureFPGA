// soc_system_alt_vip_cl_mixer_0.v

// This file was auto-generated from alt_vip_cl_mixer_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.1 720

`timescale 1 ps / 1 ps
module soc_system_alt_vip_cl_mixer_0 #(
		parameter BITS_PER_SYMBOL              = 8,
		parameter NUMBER_OF_COLOR_PLANES       = 2,
		parameter COLOR_PLANES_ARE_IN_PARALLEL = 1,
		parameter PIXELS_IN_PARALLEL           = 1,
		parameter MAX_WIDTH                    = 1920,
		parameter MAX_HEIGHT                   = 1080,
		parameter IS_422                       = 1,
		parameter LIMITED_READBACK             = 0,
		parameter LOW_LATENCY_MODE             = 0,
		parameter DATA_PIPELINE_STAGES         = 0,
		parameter USER_PACKET_SUPPORT          = "DISCARD",
		parameter USER_PACKET_FIFO_DEPTH       = 0
	) (
		input  wire        main_clock_clk,        // main_clock.clk
		input  wire        main_reset_reset,      // main_reset.reset
		input  wire [23:0] din0_data,             //       din0.data
		input  wire        din0_valid,            //           .valid
		input  wire        din0_startofpacket,    //           .startofpacket
		input  wire        din0_endofpacket,      //           .endofpacket
		output wire        din0_ready,            //           .ready
		input  wire [23:0] din1_data,             //       din1.data
		input  wire        din1_valid,            //           .valid
		input  wire        din1_startofpacket,    //           .startofpacket
		input  wire        din1_endofpacket,      //           .endofpacket
		output wire        din1_ready,            //           .ready
		output wire [23:0] dout_data,             //       dout.data
		output wire        dout_valid,            //           .valid
		output wire        dout_startofpacket,    //           .startofpacket
		output wire        dout_endofpacket,      //           .endofpacket
		input  wire        dout_ready,            //           .ready
		input  wire [6:0]  control_address,       //    control.address
		input  wire [3:0]  control_byteenable,    //           .byteenable
		input  wire        control_write,         //           .write
		input  wire [31:0] control_writedata,     //           .writedata
		input  wire        control_read,          //           .read
		output wire [31:0] control_readdata,      //           .readdata
		output wire        control_readdatavalid, //           .readdatavalid
		output wire        control_waitrequest    //           .waitrequest
	);

	wire          scheduler_cmd_mux_valid;               // scheduler:cmd_mux_valid -> cmd_mux_term:av_st_din_valid
	wire   [63:0] scheduler_cmd_mux_data;                // scheduler:cmd_mux_data -> cmd_mux_term:av_st_din_data
	wire          scheduler_cmd_mux_ready;               // cmd_mux_term:av_st_din_ready -> scheduler:cmd_mux_ready
	wire          scheduler_cmd_mux_startofpacket;       // scheduler:cmd_mux_startofpacket -> cmd_mux_term:av_st_din_startofpacket
	wire          scheduler_cmd_mux_endofpacket;         // scheduler:cmd_mux_endofpacket -> cmd_mux_term:av_st_din_endofpacket
	wire          scheduler_cmd_tpg_valid;               // scheduler:cmd_tpg_valid -> tpg:av_st_cmd_valid
	wire   [63:0] scheduler_cmd_tpg_data;                // scheduler:cmd_tpg_data -> tpg:av_st_cmd_data
	wire          scheduler_cmd_tpg_ready;               // tpg:av_st_cmd_ready -> scheduler:cmd_tpg_ready
	wire          scheduler_cmd_tpg_startofpacket;       // scheduler:cmd_tpg_startofpacket -> tpg:av_st_cmd_startofpacket
	wire          scheduler_cmd_tpg_endofpacket;         // scheduler:cmd_tpg_endofpacket -> tpg:av_st_cmd_endofpacket
	wire          scheduler_cmd_mix_valid;               // scheduler:cmd_mix_valid -> mixer_core:av_st_cmd_valid
	wire   [63:0] scheduler_cmd_mix_data;                // scheduler:cmd_mix_data -> mixer_core:av_st_cmd_data
	wire          scheduler_cmd_mix_ready;               // mixer_core:av_st_cmd_ready -> scheduler:cmd_mix_ready
	wire          scheduler_cmd_mix_startofpacket;       // scheduler:cmd_mix_startofpacket -> mixer_core:av_st_cmd_startofpacket
	wire          scheduler_cmd_mix_endofpacket;         // scheduler:cmd_mix_endofpacket -> mixer_core:av_st_cmd_endofpacket
	wire          scheduler_cmd_vob_valid;               // scheduler:cmd_vob_valid -> vob:av_st_cmd_valid
	wire   [63:0] scheduler_cmd_vob_data;                // scheduler:cmd_vob_data -> vob:av_st_cmd_data
	wire          scheduler_cmd_vob_ready;               // vob:av_st_cmd_ready -> scheduler:cmd_vob_ready
	wire          scheduler_cmd_vob_startofpacket;       // scheduler:cmd_vob_startofpacket -> vob:av_st_cmd_startofpacket
	wire          scheduler_cmd_vob_endofpacket;         // scheduler:cmd_vob_endofpacket -> vob:av_st_cmd_endofpacket
	wire          vib_resp0_av_st_resp_valid;            // vib_resp0:av_st_resp_valid -> scheduler:resp_vib_valid_0
	wire   [63:0] vib_resp0_av_st_resp_data;             // vib_resp0:av_st_resp_data -> scheduler:resp_vib_data_0
	wire          vib_resp0_av_st_resp_ready;            // scheduler:resp_vib_ready_0 -> vib_resp0:av_st_resp_ready
	wire          vib_resp0_av_st_resp_startofpacket;    // vib_resp0:av_st_resp_startofpacket -> scheduler:resp_vib_startofpacket_0
	wire          vib_resp0_av_st_resp_endofpacket;      // vib_resp0:av_st_resp_endofpacket -> scheduler:resp_vib_endofpacket_0
	wire          scheduler_cmd_vib_0_valid;             // scheduler:cmd_vib_valid_0 -> vib_cmd0:av_st_cmd_valid
	wire   [63:0] scheduler_cmd_vib_0_data;              // scheduler:cmd_vib_data_0 -> vib_cmd0:av_st_cmd_data
	wire          scheduler_cmd_vib_0_ready;             // vib_cmd0:av_st_cmd_ready -> scheduler:cmd_vib_ready_0
	wire          scheduler_cmd_vib_0_startofpacket;     // scheduler:cmd_vib_startofpacket_0 -> vib_cmd0:av_st_cmd_startofpacket
	wire          scheduler_cmd_vib_0_endofpacket;       // scheduler:cmd_vib_endofpacket_0 -> vib_cmd0:av_st_cmd_endofpacket
	wire          vib_resp1_av_st_resp_valid;            // vib_resp1:av_st_resp_valid -> scheduler:resp_vib_valid_1
	wire   [63:0] vib_resp1_av_st_resp_data;             // vib_resp1:av_st_resp_data -> scheduler:resp_vib_data_1
	wire          vib_resp1_av_st_resp_ready;            // scheduler:resp_vib_ready_1 -> vib_resp1:av_st_resp_ready
	wire          vib_resp1_av_st_resp_startofpacket;    // vib_resp1:av_st_resp_startofpacket -> scheduler:resp_vib_startofpacket_1
	wire          vib_resp1_av_st_resp_endofpacket;      // vib_resp1:av_st_resp_endofpacket -> scheduler:resp_vib_endofpacket_1
	wire          scheduler_cmd_vib_1_valid;             // scheduler:cmd_vib_valid_1 -> vib_cmd1:av_st_cmd_valid
	wire   [63:0] scheduler_cmd_vib_1_data;              // scheduler:cmd_vib_data_1 -> vib_cmd1:av_st_cmd_data
	wire          scheduler_cmd_vib_1_ready;             // vib_cmd1:av_st_cmd_ready -> scheduler:cmd_vib_ready_1
	wire          scheduler_cmd_vib_1_startofpacket;     // scheduler:cmd_vib_startofpacket_1 -> vib_cmd1:av_st_cmd_startofpacket
	wire          scheduler_cmd_vib_1_endofpacket;       // scheduler:cmd_vib_endofpacket_1 -> vib_cmd1:av_st_cmd_endofpacket
	wire          tpg_av_st_dout_valid;                  // tpg:av_st_dout_valid -> mixer_core:av_st_background_valid
	wire   [55:0] tpg_av_st_dout_data;                   // tpg:av_st_dout_data -> mixer_core:av_st_background_data
	wire          tpg_av_st_dout_ready;                  // mixer_core:av_st_background_ready -> tpg:av_st_dout_ready
	wire          tpg_av_st_dout_startofpacket;          // tpg:av_st_dout_startofpacket -> mixer_core:av_st_background_startofpacket
	wire          tpg_av_st_dout_endofpacket;            // tpg:av_st_dout_endofpacket -> mixer_core:av_st_background_endofpacket
	wire          vib_resp0_av_st_dout_valid;            // vib_resp0:av_st_dout_valid -> vib_cmd0:av_st_din_valid
	wire   [55:0] vib_resp0_av_st_dout_data;             // vib_resp0:av_st_dout_data -> vib_cmd0:av_st_din_data
	wire          vib_resp0_av_st_dout_ready;            // vib_cmd0:av_st_din_ready -> vib_resp0:av_st_dout_ready
	wire          vib_resp0_av_st_dout_startofpacket;    // vib_resp0:av_st_dout_startofpacket -> vib_cmd0:av_st_din_startofpacket
	wire          vib_resp0_av_st_dout_endofpacket;      // vib_resp0:av_st_dout_endofpacket -> vib_cmd0:av_st_din_endofpacket
	wire          vib_cmd0_av_st_dout_valid;             // vib_cmd0:av_st_dout_valid -> alpha_merge0:av_st_din_valid
	wire   [55:0] vib_cmd0_av_st_dout_data;              // vib_cmd0:av_st_dout_data -> alpha_merge0:av_st_din_data
	wire          vib_cmd0_av_st_dout_ready;             // alpha_merge0:av_st_din_ready -> vib_cmd0:av_st_dout_ready
	wire          vib_cmd0_av_st_dout_startofpacket;     // vib_cmd0:av_st_dout_startofpacket -> alpha_merge0:av_st_din_startofpacket
	wire          vib_cmd0_av_st_dout_endofpacket;       // vib_cmd0:av_st_dout_endofpacket -> alpha_merge0:av_st_din_endofpacket
	wire          alpha_merge0_av_st_dout_valid;         // alpha_merge0:av_st_dout_valid -> mixer_core:av_st_din_valid_0
	wire   [63:0] alpha_merge0_av_st_dout_data;          // alpha_merge0:av_st_dout_data -> mixer_core:av_st_din_data_0
	wire          alpha_merge0_av_st_dout_ready;         // mixer_core:av_st_din_ready_0 -> alpha_merge0:av_st_dout_ready
	wire          alpha_merge0_av_st_dout_startofpacket; // alpha_merge0:av_st_dout_startofpacket -> mixer_core:av_st_din_startofpacket_0
	wire          alpha_merge0_av_st_dout_endofpacket;   // alpha_merge0:av_st_dout_endofpacket -> mixer_core:av_st_din_endofpacket_0
	wire          vib_resp1_av_st_dout_valid;            // vib_resp1:av_st_dout_valid -> vib_cmd1:av_st_din_valid
	wire   [55:0] vib_resp1_av_st_dout_data;             // vib_resp1:av_st_dout_data -> vib_cmd1:av_st_din_data
	wire          vib_resp1_av_st_dout_ready;            // vib_cmd1:av_st_din_ready -> vib_resp1:av_st_dout_ready
	wire          vib_resp1_av_st_dout_startofpacket;    // vib_resp1:av_st_dout_startofpacket -> vib_cmd1:av_st_din_startofpacket
	wire          vib_resp1_av_st_dout_endofpacket;      // vib_resp1:av_st_dout_endofpacket -> vib_cmd1:av_st_din_endofpacket
	wire          vib_cmd1_av_st_dout_valid;             // vib_cmd1:av_st_dout_valid -> alpha_merge1:av_st_din_valid
	wire   [55:0] vib_cmd1_av_st_dout_data;              // vib_cmd1:av_st_dout_data -> alpha_merge1:av_st_din_data
	wire          vib_cmd1_av_st_dout_ready;             // alpha_merge1:av_st_din_ready -> vib_cmd1:av_st_dout_ready
	wire          vib_cmd1_av_st_dout_startofpacket;     // vib_cmd1:av_st_dout_startofpacket -> alpha_merge1:av_st_din_startofpacket
	wire          vib_cmd1_av_st_dout_endofpacket;       // vib_cmd1:av_st_dout_endofpacket -> alpha_merge1:av_st_din_endofpacket
	wire          alpha_merge1_av_st_dout_valid;         // alpha_merge1:av_st_dout_valid -> mixer_core:av_st_din_valid_1
	wire   [63:0] alpha_merge1_av_st_dout_data;          // alpha_merge1:av_st_dout_data -> mixer_core:av_st_din_data_1
	wire          alpha_merge1_av_st_dout_ready;         // mixer_core:av_st_din_ready_1 -> alpha_merge1:av_st_dout_ready
	wire          alpha_merge1_av_st_dout_startofpacket; // alpha_merge1:av_st_dout_startofpacket -> mixer_core:av_st_din_startofpacket_1
	wire          alpha_merge1_av_st_dout_endofpacket;   // alpha_merge1:av_st_dout_endofpacket -> mixer_core:av_st_din_endofpacket_1
	wire          mixer_core_av_st_dout_valid;           // mixer_core:av_st_dout_valid -> vob:av_st_din_valid
	wire   [55:0] mixer_core_av_st_dout_data;            // mixer_core:av_st_dout_data -> vob:av_st_din_data
	wire          mixer_core_av_st_dout_ready;           // vob:av_st_din_ready -> mixer_core:av_st_dout_ready
	wire          mixer_core_av_st_dout_startofpacket;   // mixer_core:av_st_dout_startofpacket -> vob:av_st_din_startofpacket
	wire          mixer_core_av_st_dout_endofpacket;     // mixer_core:av_st_dout_endofpacket -> vob:av_st_din_endofpacket
	wire    [1:0] mixer_core_av_st_din_ready;            // port fragment
	wire    [1:0] scheduler_cmd_vib_valid;               // port fragment
	wire    [1:0] scheduler_cmd_vib_startofpacket;       // port fragment
	wire    [1:0] scheduler_cmd_vib_endofpacket;         // port fragment
	wire  [127:0] scheduler_cmd_vib_data;                // port fragment
	wire    [1:0] scheduler_resp_vib_ready;              // port fragment

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (BITS_PER_SYMBOL != 8)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					bits_per_symbol_check ( .error(1'b1) );
		end
		if (NUMBER_OF_COLOR_PLANES != 2)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					number_of_color_planes_check ( .error(1'b1) );
		end
		if (COLOR_PLANES_ARE_IN_PARALLEL != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					color_planes_are_in_parallel_check ( .error(1'b1) );
		end
		if (PIXELS_IN_PARALLEL != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					pixels_in_parallel_check ( .error(1'b1) );
		end
		if (MAX_WIDTH != 1920)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					max_width_check ( .error(1'b1) );
		end
		if (MAX_HEIGHT != 1080)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					max_height_check ( .error(1'b1) );
		end
		if (IS_422 != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					is_422_check ( .error(1'b1) );
		end
		if (LIMITED_READBACK != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					limited_readback_check ( .error(1'b1) );
		end
		if (LOW_LATENCY_MODE != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					low_latency_mode_check ( .error(1'b1) );
		end
		if (DATA_PIPELINE_STAGES != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					data_pipeline_stages_check ( .error(1'b1) );
		end
		if (USER_PACKET_SUPPORT != "DISCARD")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					user_packet_support_check ( .error(1'b1) );
		end
		if (USER_PACKET_FIFO_DEPTH != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					user_packet_fifo_depth_check ( .error(1'b1) );
		end
	endgenerate

	alt_vip_video_input_bridge_resp #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.DEFAULT_LINE_LENGTH          (1920),
		.VIB_MODE                     ("FULL"),
		.VIDEO_PROTOCOL_NO            (1),
		.READY_LATENCY_1              (1),
		.MAX_WIDTH                    (1920),
		.MAX_HEIGHT                   (1080),
		.ENABLE_RESOLUTION_CHECK      (1),
		.MULTI_CONTEXT_SUPPORT        (0),
		.PIPELINE_READY               (0),
		.RESP_SRC_ADDRESS             (0),
		.RESP_DST_ADDRESS             (0),
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) vib_resp0 (
		.clock                       (main_clock_clk),                     //    main_clock.clk
		.reset                       (main_reset_reset),                   //    main_reset.reset
		.av_st_vid_din_data          (din0_data),                          // av_st_vid_din.data
		.av_st_vid_din_valid         (din0_valid),                         //              .valid
		.av_st_vid_din_startofpacket (din0_startofpacket),                 //              .startofpacket
		.av_st_vid_din_endofpacket   (din0_endofpacket),                   //              .endofpacket
		.av_st_vid_din_ready         (din0_ready),                         //              .ready
		.av_st_resp_valid            (vib_resp0_av_st_resp_valid),         //    av_st_resp.valid
		.av_st_resp_startofpacket    (vib_resp0_av_st_resp_startofpacket), //              .startofpacket
		.av_st_resp_endofpacket      (vib_resp0_av_st_resp_endofpacket),   //              .endofpacket
		.av_st_resp_data             (vib_resp0_av_st_resp_data),          //              .data
		.av_st_resp_ready            (vib_resp0_av_st_resp_ready),         //              .ready
		.av_st_dout_valid            (vib_resp0_av_st_dout_valid),         //    av_st_dout.valid
		.av_st_dout_startofpacket    (vib_resp0_av_st_dout_startofpacket), //              .startofpacket
		.av_st_dout_endofpacket      (vib_resp0_av_st_dout_endofpacket),   //              .endofpacket
		.av_st_dout_data             (vib_resp0_av_st_dout_data),          //              .data
		.av_st_dout_ready            (vib_resp0_av_st_dout_ready)          //              .ready
	);

	alt_vip_video_input_bridge_cmd #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.PIPELINE_READY               (0),
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) vib_cmd0 (
		.clock                    (main_clock_clk),                     // main_clock.clk
		.reset                    (main_reset_reset),                   // main_reset.reset
		.av_st_cmd_valid          (scheduler_cmd_vib_0_valid),          //  av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_cmd_vib_0_startofpacket),  //           .startofpacket
		.av_st_cmd_endofpacket    (scheduler_cmd_vib_0_endofpacket),    //           .endofpacket
		.av_st_cmd_data           (scheduler_cmd_vib_0_data),           //           .data
		.av_st_cmd_ready          (scheduler_cmd_vib_0_ready),          //           .ready
		.av_st_din_valid          (vib_resp0_av_st_dout_valid),         //  av_st_din.valid
		.av_st_din_startofpacket  (vib_resp0_av_st_dout_startofpacket), //           .startofpacket
		.av_st_din_endofpacket    (vib_resp0_av_st_dout_endofpacket),   //           .endofpacket
		.av_st_din_data           (vib_resp0_av_st_dout_data),          //           .data
		.av_st_din_ready          (vib_resp0_av_st_dout_ready),         //           .ready
		.av_st_dout_valid         (vib_cmd0_av_st_dout_valid),          // av_st_dout.valid
		.av_st_dout_startofpacket (vib_cmd0_av_st_dout_startofpacket),  //           .startofpacket
		.av_st_dout_endofpacket   (vib_cmd0_av_st_dout_endofpacket),    //           .endofpacket
		.av_st_dout_data          (vib_cmd0_av_st_dout_data),           //           .data
		.av_st_dout_ready         (vib_cmd0_av_st_dout_ready)           //           .ready
	);

	alt_vip_mixer_alpha_merge #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES_IN    (3),
		.NUMBER_OF_COLOR_PLANES_OUT   (4),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) alpha_merge0 (
		.clock                    (main_clock_clk),                        // main_clock.clk
		.reset                    (main_reset_reset),                      // main_reset.reset
		.av_st_din_valid          (vib_cmd0_av_st_dout_valid),             //  av_st_din.valid
		.av_st_din_startofpacket  (vib_cmd0_av_st_dout_startofpacket),     //           .startofpacket
		.av_st_din_endofpacket    (vib_cmd0_av_st_dout_endofpacket),       //           .endofpacket
		.av_st_din_data           (vib_cmd0_av_st_dout_data),              //           .data
		.av_st_din_ready          (vib_cmd0_av_st_dout_ready),             //           .ready
		.av_st_dout_valid         (alpha_merge0_av_st_dout_valid),         // av_st_dout.valid
		.av_st_dout_startofpacket (alpha_merge0_av_st_dout_startofpacket), //           .startofpacket
		.av_st_dout_endofpacket   (alpha_merge0_av_st_dout_endofpacket),   //           .endofpacket
		.av_st_dout_data          (alpha_merge0_av_st_dout_data),          //           .data
		.av_st_dout_ready         (alpha_merge0_av_st_dout_ready)          //           .ready
	);

	alt_vip_video_input_bridge_resp #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.DEFAULT_LINE_LENGTH          (1920),
		.VIB_MODE                     ("FULL"),
		.VIDEO_PROTOCOL_NO            (1),
		.READY_LATENCY_1              (1),
		.MAX_WIDTH                    (1920),
		.MAX_HEIGHT                   (1080),
		.ENABLE_RESOLUTION_CHECK      (1),
		.MULTI_CONTEXT_SUPPORT        (0),
		.PIPELINE_READY               (0),
		.RESP_SRC_ADDRESS             (0),
		.RESP_DST_ADDRESS             (0),
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) vib_resp1 (
		.clock                       (main_clock_clk),                     //    main_clock.clk
		.reset                       (main_reset_reset),                   //    main_reset.reset
		.av_st_vid_din_data          (din1_data),                          // av_st_vid_din.data
		.av_st_vid_din_valid         (din1_valid),                         //              .valid
		.av_st_vid_din_startofpacket (din1_startofpacket),                 //              .startofpacket
		.av_st_vid_din_endofpacket   (din1_endofpacket),                   //              .endofpacket
		.av_st_vid_din_ready         (din1_ready),                         //              .ready
		.av_st_resp_valid            (vib_resp1_av_st_resp_valid),         //    av_st_resp.valid
		.av_st_resp_startofpacket    (vib_resp1_av_st_resp_startofpacket), //              .startofpacket
		.av_st_resp_endofpacket      (vib_resp1_av_st_resp_endofpacket),   //              .endofpacket
		.av_st_resp_data             (vib_resp1_av_st_resp_data),          //              .data
		.av_st_resp_ready            (vib_resp1_av_st_resp_ready),         //              .ready
		.av_st_dout_valid            (vib_resp1_av_st_dout_valid),         //    av_st_dout.valid
		.av_st_dout_startofpacket    (vib_resp1_av_st_dout_startofpacket), //              .startofpacket
		.av_st_dout_endofpacket      (vib_resp1_av_st_dout_endofpacket),   //              .endofpacket
		.av_st_dout_data             (vib_resp1_av_st_dout_data),          //              .data
		.av_st_dout_ready            (vib_resp1_av_st_dout_ready)          //              .ready
	);

	alt_vip_video_input_bridge_cmd #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.PIPELINE_READY               (0),
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) vib_cmd1 (
		.clock                    (main_clock_clk),                     // main_clock.clk
		.reset                    (main_reset_reset),                   // main_reset.reset
		.av_st_cmd_valid          (scheduler_cmd_vib_1_valid),          //  av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_cmd_vib_1_startofpacket),  //           .startofpacket
		.av_st_cmd_endofpacket    (scheduler_cmd_vib_1_endofpacket),    //           .endofpacket
		.av_st_cmd_data           (scheduler_cmd_vib_1_data),           //           .data
		.av_st_cmd_ready          (scheduler_cmd_vib_1_ready),          //           .ready
		.av_st_din_valid          (vib_resp1_av_st_dout_valid),         //  av_st_din.valid
		.av_st_din_startofpacket  (vib_resp1_av_st_dout_startofpacket), //           .startofpacket
		.av_st_din_endofpacket    (vib_resp1_av_st_dout_endofpacket),   //           .endofpacket
		.av_st_din_data           (vib_resp1_av_st_dout_data),          //           .data
		.av_st_din_ready          (vib_resp1_av_st_dout_ready),         //           .ready
		.av_st_dout_valid         (vib_cmd1_av_st_dout_valid),          // av_st_dout.valid
		.av_st_dout_startofpacket (vib_cmd1_av_st_dout_startofpacket),  //           .startofpacket
		.av_st_dout_endofpacket   (vib_cmd1_av_st_dout_endofpacket),    //           .endofpacket
		.av_st_dout_data          (vib_cmd1_av_st_dout_data),           //           .data
		.av_st_dout_ready         (vib_cmd1_av_st_dout_ready)           //           .ready
	);

	alt_vip_mixer_alpha_merge #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES_IN    (3),
		.NUMBER_OF_COLOR_PLANES_OUT   (4),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) alpha_merge1 (
		.clock                    (main_clock_clk),                        // main_clock.clk
		.reset                    (main_reset_reset),                      // main_reset.reset
		.av_st_din_valid          (vib_cmd1_av_st_dout_valid),             //  av_st_din.valid
		.av_st_din_startofpacket  (vib_cmd1_av_st_dout_startofpacket),     //           .startofpacket
		.av_st_din_endofpacket    (vib_cmd1_av_st_dout_endofpacket),       //           .endofpacket
		.av_st_din_data           (vib_cmd1_av_st_dout_data),              //           .data
		.av_st_din_ready          (vib_cmd1_av_st_dout_ready),             //           .ready
		.av_st_dout_valid         (alpha_merge1_av_st_dout_valid),         // av_st_dout.valid
		.av_st_dout_startofpacket (alpha_merge1_av_st_dout_startofpacket), //           .startofpacket
		.av_st_dout_endofpacket   (alpha_merge1_av_st_dout_endofpacket),   //           .endofpacket
		.av_st_dout_data          (alpha_merge1_av_st_dout_data),          //           .data
		.av_st_dout_ready         (alpha_merge1_av_st_dout_ready)          //           .ready
	);

	alt_vip_tpg_alg_core #(
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8),
		.MAX_WIDTH                    (1920),
		.MAX_HEIGHT                   (1080),
		.BITS_PER_SYMBOL              (8),
		.PIXELS_IN_PARALLEL           (1),
		.OUTPUT_FORMAT                ("4.4.4"),
		.COLOR_SPACE                  ("RGB"),
		.INTERLACING                  ("prog"),
		.PATTERN                      ("colorbars"),
		.UNIFORM_VALUE_RY             (0),
		.UNIFORM_VALUE_GCB            (0),
		.UNIFORM_VALUE_BCR            (0),
		.USE_BACKGROUND_AS_BORDER     (0),
		.COLOR_PLANES_ARE_IN_PARALLEL (1)
	) tpg (
		.clock                    (main_clock_clk),                  // main_clock.clk
		.reset                    (main_reset_reset),                // main_reset.reset
		.av_st_cmd_valid          (scheduler_cmd_tpg_valid),         //  av_st_cmd.valid
		.av_st_cmd_startofpacket  (scheduler_cmd_tpg_startofpacket), //           .startofpacket
		.av_st_cmd_endofpacket    (scheduler_cmd_tpg_endofpacket),   //           .endofpacket
		.av_st_cmd_data           (scheduler_cmd_tpg_data),          //           .data
		.av_st_cmd_ready          (scheduler_cmd_tpg_ready),         //           .ready
		.av_st_dout_valid         (tpg_av_st_dout_valid),            // av_st_dout.valid
		.av_st_dout_startofpacket (tpg_av_st_dout_startofpacket),    //           .startofpacket
		.av_st_dout_endofpacket   (tpg_av_st_dout_endofpacket),      //           .endofpacket
		.av_st_dout_data          (tpg_av_st_dout_data),             //           .data
		.av_st_dout_ready         (tpg_av_st_dout_ready)             //           .ready
	);

	alt_vip_mix_alg_core #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.MAX_WIDTH                    (1920),
		.MAX_HEIGHT                   (1080),
		.NO_OF_INPUTS                 (2),
		.PIXELS_IN_PARALLEL           (1),
		.ALPHA_ENABLE                 (0),
		.LAYER_POSITION_ENABLE        (0),
		.DATA_SRC_ADDRESS             (2),
		.PIPELINE_READY               (0),
		.DATA_PIPELINE_STAGES         (0),
		.ALPHA_STREAM_ENABLE0         (0),
		.ALPHA_STREAM_ENABLE1         (0),
		.ALPHA_STREAM_ENABLE2         (0),
		.ALPHA_STREAM_ENABLE3         (0),
		.ALPHA_STREAM_ENABLE4         (0),
		.ALPHA_STREAM_ENABLE5         (0),
		.ALPHA_STREAM_ENABLE6         (0),
		.ALPHA_STREAM_ENABLE7         (0),
		.ALPHA_STREAM_ENABLE8         (0),
		.ALPHA_STREAM_ENABLE9         (0),
		.ALPHA_STREAM_ENABLE10        (0),
		.ALPHA_STREAM_ENABLE11        (0),
		.ALPHA_STREAM_ENABLE12        (0),
		.ALPHA_STREAM_ENABLE13        (0),
		.ALPHA_STREAM_ENABLE14        (0),
		.ALPHA_STREAM_ENABLE15        (0),
		.ALPHA_STREAM_ENABLE16        (0),
		.ALPHA_STREAM_ENABLE17        (0),
		.ALPHA_STREAM_ENABLE18        (0),
		.ALPHA_STREAM_ENABLE19        (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) mixer_core (
		.clock                          (main_clock_clk),                                                                //       main_clock.clk
		.reset                          (main_reset_reset),                                                              //       main_reset.reset
		.av_st_cmd_valid                (scheduler_cmd_mix_valid),                                                       //        av_st_cmd.valid
		.av_st_cmd_startofpacket        (scheduler_cmd_mix_startofpacket),                                               //                 .startofpacket
		.av_st_cmd_endofpacket          (scheduler_cmd_mix_endofpacket),                                                 //                 .endofpacket
		.av_st_cmd_data                 (scheduler_cmd_mix_data),                                                        //                 .data
		.av_st_cmd_ready                (scheduler_cmd_mix_ready),                                                       //                 .ready
		.av_st_din_valid                ({alpha_merge1_av_st_dout_valid,alpha_merge0_av_st_dout_valid}),                 //      av_st_din_0.valid
		.av_st_din_startofpacket        ({alpha_merge1_av_st_dout_startofpacket,alpha_merge0_av_st_dout_startofpacket}), //                 .startofpacket
		.av_st_din_endofpacket          ({alpha_merge1_av_st_dout_endofpacket,alpha_merge0_av_st_dout_endofpacket}),     //                 .endofpacket
		.av_st_din_data                 ({alpha_merge1_av_st_dout_data[63:0],alpha_merge0_av_st_dout_data[63:0]}),       //                 .data
		.av_st_din_ready                ({mixer_core_av_st_din_ready[1],mixer_core_av_st_din_ready[0]}),                 //                 .ready
		.av_st_background_valid         (tpg_av_st_dout_valid),                                                          // av_st_background.valid
		.av_st_background_startofpacket (tpg_av_st_dout_startofpacket),                                                  //                 .startofpacket
		.av_st_background_endofpacket   (tpg_av_st_dout_endofpacket),                                                    //                 .endofpacket
		.av_st_background_data          (tpg_av_st_dout_data),                                                           //                 .data
		.av_st_background_ready         (tpg_av_st_dout_ready),                                                          //                 .ready
		.av_st_dout_valid               (mixer_core_av_st_dout_valid),                                                   //       av_st_dout.valid
		.av_st_dout_startofpacket       (mixer_core_av_st_dout_startofpacket),                                           //                 .startofpacket
		.av_st_dout_endofpacket         (mixer_core_av_st_dout_endofpacket),                                             //                 .endofpacket
		.av_st_dout_data                (mixer_core_av_st_dout_data),                                                    //                 .data
		.av_st_dout_ready               (mixer_core_av_st_dout_ready)                                                    //                 .ready
	);

	alt_vip_video_output_bridge #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.VIDEO_PROTOCOL_NO            (1),
		.READY_LATENCY_1              (1),
		.SOP_PRE_ALIGNED              (0),
		.MULTI_CONTEXT_SUPPORT        (0),
		.TYPE_11_SUPPORT              (0),
		.NO_CONCATENATION             (0),
		.PIPELINE_READY               (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8),
		.LOW_LATENCY_COMMAND_MODE     (0)
	) vob (
		.clock                        (main_clock_clk),                      //     main_clock.clk
		.reset                        (main_reset_reset),                    //     main_reset.reset
		.av_st_cmd_valid              (scheduler_cmd_vob_valid),             //      av_st_cmd.valid
		.av_st_cmd_startofpacket      (scheduler_cmd_vob_startofpacket),     //               .startofpacket
		.av_st_cmd_endofpacket        (scheduler_cmd_vob_endofpacket),       //               .endofpacket
		.av_st_cmd_data               (scheduler_cmd_vob_data),              //               .data
		.av_st_cmd_ready              (scheduler_cmd_vob_ready),             //               .ready
		.av_st_din_valid              (mixer_core_av_st_dout_valid),         //      av_st_din.valid
		.av_st_din_startofpacket      (mixer_core_av_st_dout_startofpacket), //               .startofpacket
		.av_st_din_endofpacket        (mixer_core_av_st_dout_endofpacket),   //               .endofpacket
		.av_st_din_data               (mixer_core_av_st_dout_data),          //               .data
		.av_st_din_ready              (mixer_core_av_st_dout_ready),         //               .ready
		.av_st_vid_dout_data          (dout_data),                           // av_st_vid_dout.data
		.av_st_vid_dout_valid         (dout_valid),                          //               .valid
		.av_st_vid_dout_startofpacket (dout_startofpacket),                  //               .startofpacket
		.av_st_vid_dout_endofpacket   (dout_endofpacket),                    //               .endofpacket
		.av_st_vid_dout_ready         (dout_ready)                           //               .ready
	);

	alt_vip_mix_scheduler #(
		.FRAME_WIDTH            (1920),
		.FRAME_HEIGHT           (1080),
		.NO_OF_INPUTS           (2),
		.RUNTIME_CONTROL        (1),
		.UNIFORM_VALUE_RY       (0),
		.UNIFORM_VALUE_GCB      (0),
		.UNIFORM_VALUE_BCR      (0),
		.USER_PACKETS_SUPPORTED (0),
		.ALPHA_ENABLE           (0),
		.LAYER_POSITION_ENABLE  (0),
		.LIMITED_READBACK       (0),
		.LOW_LATENCY_MODE       (0),
		.SRC_WIDTH              (8),
		.DST_WIDTH              (8),
		.CONTEXT_WIDTH          (8),
		.TASK_WIDTH             (8)
	) scheduler (
		.clock                       (main_clock_clk),                                                          //    main_clock.clk
		.reset                       (main_reset_reset),                                                        //    main_reset.reset
		.cmd_tpg_valid               (scheduler_cmd_tpg_valid),                                                 //       cmd_tpg.valid
		.cmd_tpg_startofpacket       (scheduler_cmd_tpg_startofpacket),                                         //              .startofpacket
		.cmd_tpg_endofpacket         (scheduler_cmd_tpg_endofpacket),                                           //              .endofpacket
		.cmd_tpg_data                (scheduler_cmd_tpg_data),                                                  //              .data
		.cmd_tpg_ready               (scheduler_cmd_tpg_ready),                                                 //              .ready
		.cmd_mix_valid               (scheduler_cmd_mix_valid),                                                 //       cmd_mix.valid
		.cmd_mix_startofpacket       (scheduler_cmd_mix_startofpacket),                                         //              .startofpacket
		.cmd_mix_endofpacket         (scheduler_cmd_mix_endofpacket),                                           //              .endofpacket
		.cmd_mix_data                (scheduler_cmd_mix_data),                                                  //              .data
		.cmd_mix_ready               (scheduler_cmd_mix_ready),                                                 //              .ready
		.cmd_vob_valid               (scheduler_cmd_vob_valid),                                                 //       cmd_vob.valid
		.cmd_vob_startofpacket       (scheduler_cmd_vob_startofpacket),                                         //              .startofpacket
		.cmd_vob_endofpacket         (scheduler_cmd_vob_endofpacket),                                           //              .endofpacket
		.cmd_vob_data                (scheduler_cmd_vob_data),                                                  //              .data
		.cmd_vob_ready               (scheduler_cmd_vob_ready),                                                 //              .ready
		.cmd_mux_valid               (scheduler_cmd_mux_valid),                                                 //       cmd_mux.valid
		.cmd_mux_startofpacket       (scheduler_cmd_mux_startofpacket),                                         //              .startofpacket
		.cmd_mux_endofpacket         (scheduler_cmd_mux_endofpacket),                                           //              .endofpacket
		.cmd_mux_data                (scheduler_cmd_mux_data),                                                  //              .data
		.cmd_mux_ready               (scheduler_cmd_mux_ready),                                                 //              .ready
		.cmd_vib_valid               ({scheduler_cmd_vib_valid[1],scheduler_cmd_vib_valid[0]}),                 //     cmd_vib_0.valid
		.cmd_vib_startofpacket       ({scheduler_cmd_vib_startofpacket[1],scheduler_cmd_vib_startofpacket[0]}), //              .startofpacket
		.cmd_vib_endofpacket         ({scheduler_cmd_vib_endofpacket[1],scheduler_cmd_vib_endofpacket[0]}),     //              .endofpacket
		.cmd_vib_data                ({scheduler_cmd_vib_data[127:64],scheduler_cmd_vib_data[63:0]}),           //              .data
		.cmd_vib_ready               ({scheduler_cmd_vib_1_ready,scheduler_cmd_vib_0_ready}),                   //              .ready
		.resp_vib_valid              ({vib_resp1_av_st_resp_valid,vib_resp0_av_st_resp_valid}),                 //    resp_vib_0.valid
		.resp_vib_startofpacket      ({vib_resp1_av_st_resp_startofpacket,vib_resp0_av_st_resp_startofpacket}), //              .startofpacket
		.resp_vib_endofpacket        ({vib_resp1_av_st_resp_endofpacket,vib_resp0_av_st_resp_endofpacket}),     //              .endofpacket
		.resp_vib_data               ({vib_resp1_av_st_resp_data[63:0],vib_resp0_av_st_resp_data[63:0]}),       //              .data
		.resp_vib_ready              ({scheduler_resp_vib_ready[1],scheduler_resp_vib_ready[0]}),               //              .ready
		.av_mm_control_address       (control_address),                                                         // av_mm_control.address
		.av_mm_control_byteenable    (control_byteenable),                                                      //              .byteenable
		.av_mm_control_write         (control_write),                                                           //              .write
		.av_mm_control_writedata     (control_writedata),                                                       //              .writedata
		.av_mm_control_read          (control_read),                                                            //              .read
		.av_mm_control_readdata      (control_readdata),                                                        //              .readdata
		.av_mm_control_readdatavalid (control_readdatavalid),                                                   //              .readdatavalid
		.av_mm_control_waitrequest   (control_waitrequest)                                                      //              .waitrequest
	);

	alt_vip_message_sink_terminator #(
		.DATA_WIDTH    (32),
		.SRC_WIDTH     (8),
		.DST_WIDTH     (8),
		.CONTEXT_WIDTH (8),
		.TASK_WIDTH    (8),
		.USER_WIDTH    (0)
	) cmd_mux_term (
		.clock                   (main_clock_clk),                  // main_clock.clk
		.reset                   (main_reset_reset),                // main_reset.reset
		.av_st_din_valid         (scheduler_cmd_mux_valid),         //  av_st_din.valid
		.av_st_din_startofpacket (scheduler_cmd_mux_startofpacket), //           .startofpacket
		.av_st_din_endofpacket   (scheduler_cmd_mux_endofpacket),   //           .endofpacket
		.av_st_din_data          (scheduler_cmd_mux_data),          //           .data
		.av_st_din_ready         (scheduler_cmd_mux_ready)          //           .ready
	);

	assign vib_resp0_av_st_resp_ready = { scheduler_resp_vib_ready[0] };

	assign scheduler_cmd_vib_0_valid = { scheduler_cmd_vib_valid[0] };

	assign scheduler_cmd_vib_0_data = { scheduler_cmd_vib_data[63:0] };

	assign scheduler_cmd_vib_0_startofpacket = { scheduler_cmd_vib_startofpacket[0] };

	assign scheduler_cmd_vib_0_endofpacket = { scheduler_cmd_vib_endofpacket[0] };

	assign vib_resp1_av_st_resp_ready = { scheduler_resp_vib_ready[1] };

	assign scheduler_cmd_vib_1_valid = { scheduler_cmd_vib_valid[1] };

	assign scheduler_cmd_vib_1_data = { scheduler_cmd_vib_data[127:64] };

	assign scheduler_cmd_vib_1_startofpacket = { scheduler_cmd_vib_startofpacket[1] };

	assign scheduler_cmd_vib_1_endofpacket = { scheduler_cmd_vib_endofpacket[1] };

	assign alpha_merge0_av_st_dout_ready = { mixer_core_av_st_din_ready[0] };

	assign alpha_merge1_av_st_dout_ready = { mixer_core_av_st_din_ready[1] };

endmodule
