// soc_system_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.1 720

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_2 (
		input  wire        pll_0_outclk0_clk,                                      //                                    pll_0_outclk0.clk
		input  wire        pll_0_outclk2_clk,                                      //                                    pll_0_outclk2.clk
		input  wire        sys_pll_sys_clk_clk,                                    //                                  sys_pll_sys_clk.clk
		input  wire        mm_bridge_0_reset_reset_bridge_in_reset_reset,          //          mm_bridge_0_reset_reset_bridge_in_reset.reset
		input  wire        video_dma_reset_reset_bridge_in_reset_reset,            //            video_dma_reset_reset_bridge_in_reset.reset
		input  wire        videocard_new_0_reset_sink_reset_bridge_in_reset_reset, // videocard_new_0_reset_sink_reset_bridge_in_reset.reset
		input  wire [19:0] mm_bridge_0_m0_address,                                 //                                   mm_bridge_0_m0.address
		output wire        mm_bridge_0_m0_waitrequest,                             //                                                 .waitrequest
		input  wire [0:0]  mm_bridge_0_m0_burstcount,                              //                                                 .burstcount
		input  wire [3:0]  mm_bridge_0_m0_byteenable,                              //                                                 .byteenable
		input  wire        mm_bridge_0_m0_read,                                    //                                                 .read
		output wire [31:0] mm_bridge_0_m0_readdata,                                //                                                 .readdata
		output wire        mm_bridge_0_m0_readdatavalid,                           //                                                 .readdatavalid
		input  wire        mm_bridge_0_m0_write,                                   //                                                 .write
		input  wire [31:0] mm_bridge_0_m0_writedata,                               //                                                 .writedata
		input  wire        mm_bridge_0_m0_debugaccess,                             //                                                 .debugaccess
		output wire [6:0]  alt_vip_cl_mixer_0_control_address,                     //                       alt_vip_cl_mixer_0_control.address
		output wire        alt_vip_cl_mixer_0_control_write,                       //                                                 .write
		output wire        alt_vip_cl_mixer_0_control_read,                        //                                                 .read
		input  wire [31:0] alt_vip_cl_mixer_0_control_readdata,                    //                                                 .readdata
		output wire [31:0] alt_vip_cl_mixer_0_control_writedata,                   //                                                 .writedata
		output wire [3:0]  alt_vip_cl_mixer_0_control_byteenable,                  //                                                 .byteenable
		input  wire        alt_vip_cl_mixer_0_control_readdatavalid,               //                                                 .readdatavalid
		input  wire        alt_vip_cl_mixer_0_control_waitrequest,                 //                                                 .waitrequest
		output wire [2:0]  dma_0_control_port_slave_address,                       //                         dma_0_control_port_slave.address
		output wire        dma_0_control_port_slave_write,                         //                                                 .write
		input  wire [31:0] dma_0_control_port_slave_readdata,                      //                                                 .readdata
		output wire [31:0] dma_0_control_port_slave_writedata,                     //                                                 .writedata
		output wire        dma_0_control_port_slave_chipselect,                    //                                                 .chipselect
		output wire [1:0]  video_dma_avalon_control_slave_address,                 //                   video_dma_avalon_control_slave.address
		output wire        video_dma_avalon_control_slave_write,                   //                                                 .write
		output wire        video_dma_avalon_control_slave_read,                    //                                                 .read
		input  wire [31:0] video_dma_avalon_control_slave_readdata,                //                                                 .readdata
		output wire [31:0] video_dma_avalon_control_slave_writedata,               //                                                 .writedata
		output wire [3:0]  video_dma_avalon_control_slave_byteenable,              //                                                 .byteenable
		output wire [0:0]  videocard_new_0_memory_control_address,                 //                   videocard_new_0_memory_control.address
		output wire        videocard_new_0_memory_control_write,                   //                                                 .write
		output wire        videocard_new_0_memory_control_read,                    //                                                 .read
		input  wire [7:0]  videocard_new_0_memory_control_readdata,                //                                                 .readdata
		output wire [7:0]  videocard_new_0_memory_control_writedata                //                                                 .writedata
	);

	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;    // mm_bridge_0_m0_agent:av_waitrequest -> mm_bridge_0_m0_translator:uav_waitrequest
	wire  [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;       // mm_bridge_0_m0_agent:av_readdata -> mm_bridge_0_m0_translator:uav_readdata
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;    // mm_bridge_0_m0_translator:uav_debugaccess -> mm_bridge_0_m0_agent:av_debugaccess
	wire  [19:0] mm_bridge_0_m0_translator_avalon_universal_master_0_address;        // mm_bridge_0_m0_translator:uav_address -> mm_bridge_0_m0_agent:av_address
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_read;           // mm_bridge_0_m0_translator:uav_read -> mm_bridge_0_m0_agent:av_read
	wire   [3:0] mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;     // mm_bridge_0_m0_translator:uav_byteenable -> mm_bridge_0_m0_agent:av_byteenable
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;  // mm_bridge_0_m0_agent:av_readdatavalid -> mm_bridge_0_m0_translator:uav_readdatavalid
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_lock;           // mm_bridge_0_m0_translator:uav_lock -> mm_bridge_0_m0_agent:av_lock
	wire         mm_bridge_0_m0_translator_avalon_universal_master_0_write;          // mm_bridge_0_m0_translator:uav_write -> mm_bridge_0_m0_agent:av_write
	wire  [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;      // mm_bridge_0_m0_translator:uav_writedata -> mm_bridge_0_m0_agent:av_writedata
	wire   [2:0] mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;     // mm_bridge_0_m0_translator:uav_burstcount -> mm_bridge_0_m0_agent:av_burstcount
	wire  [31:0] video_dma_avalon_control_slave_agent_m0_readdata;                   // video_dma_avalon_control_slave_translator:uav_readdata -> video_dma_avalon_control_slave_agent:m0_readdata
	wire         video_dma_avalon_control_slave_agent_m0_waitrequest;                // video_dma_avalon_control_slave_translator:uav_waitrequest -> video_dma_avalon_control_slave_agent:m0_waitrequest
	wire         video_dma_avalon_control_slave_agent_m0_debugaccess;                // video_dma_avalon_control_slave_agent:m0_debugaccess -> video_dma_avalon_control_slave_translator:uav_debugaccess
	wire  [19:0] video_dma_avalon_control_slave_agent_m0_address;                    // video_dma_avalon_control_slave_agent:m0_address -> video_dma_avalon_control_slave_translator:uav_address
	wire   [3:0] video_dma_avalon_control_slave_agent_m0_byteenable;                 // video_dma_avalon_control_slave_agent:m0_byteenable -> video_dma_avalon_control_slave_translator:uav_byteenable
	wire         video_dma_avalon_control_slave_agent_m0_read;                       // video_dma_avalon_control_slave_agent:m0_read -> video_dma_avalon_control_slave_translator:uav_read
	wire         video_dma_avalon_control_slave_agent_m0_readdatavalid;              // video_dma_avalon_control_slave_translator:uav_readdatavalid -> video_dma_avalon_control_slave_agent:m0_readdatavalid
	wire         video_dma_avalon_control_slave_agent_m0_lock;                       // video_dma_avalon_control_slave_agent:m0_lock -> video_dma_avalon_control_slave_translator:uav_lock
	wire  [31:0] video_dma_avalon_control_slave_agent_m0_writedata;                  // video_dma_avalon_control_slave_agent:m0_writedata -> video_dma_avalon_control_slave_translator:uav_writedata
	wire         video_dma_avalon_control_slave_agent_m0_write;                      // video_dma_avalon_control_slave_agent:m0_write -> video_dma_avalon_control_slave_translator:uav_write
	wire   [2:0] video_dma_avalon_control_slave_agent_m0_burstcount;                 // video_dma_avalon_control_slave_agent:m0_burstcount -> video_dma_avalon_control_slave_translator:uav_burstcount
	wire         video_dma_avalon_control_slave_agent_rf_source_valid;               // video_dma_avalon_control_slave_agent:rf_source_valid -> video_dma_avalon_control_slave_agent_rsp_fifo:in_valid
	wire  [92:0] video_dma_avalon_control_slave_agent_rf_source_data;                // video_dma_avalon_control_slave_agent:rf_source_data -> video_dma_avalon_control_slave_agent_rsp_fifo:in_data
	wire         video_dma_avalon_control_slave_agent_rf_source_ready;               // video_dma_avalon_control_slave_agent_rsp_fifo:in_ready -> video_dma_avalon_control_slave_agent:rf_source_ready
	wire         video_dma_avalon_control_slave_agent_rf_source_startofpacket;       // video_dma_avalon_control_slave_agent:rf_source_startofpacket -> video_dma_avalon_control_slave_agent_rsp_fifo:in_startofpacket
	wire         video_dma_avalon_control_slave_agent_rf_source_endofpacket;         // video_dma_avalon_control_slave_agent:rf_source_endofpacket -> video_dma_avalon_control_slave_agent_rsp_fifo:in_endofpacket
	wire         video_dma_avalon_control_slave_agent_rsp_fifo_out_valid;            // video_dma_avalon_control_slave_agent_rsp_fifo:out_valid -> video_dma_avalon_control_slave_agent:rf_sink_valid
	wire  [92:0] video_dma_avalon_control_slave_agent_rsp_fifo_out_data;             // video_dma_avalon_control_slave_agent_rsp_fifo:out_data -> video_dma_avalon_control_slave_agent:rf_sink_data
	wire         video_dma_avalon_control_slave_agent_rsp_fifo_out_ready;            // video_dma_avalon_control_slave_agent:rf_sink_ready -> video_dma_avalon_control_slave_agent_rsp_fifo:out_ready
	wire         video_dma_avalon_control_slave_agent_rsp_fifo_out_startofpacket;    // video_dma_avalon_control_slave_agent_rsp_fifo:out_startofpacket -> video_dma_avalon_control_slave_agent:rf_sink_startofpacket
	wire         video_dma_avalon_control_slave_agent_rsp_fifo_out_endofpacket;      // video_dma_avalon_control_slave_agent_rsp_fifo:out_endofpacket -> video_dma_avalon_control_slave_agent:rf_sink_endofpacket
	wire         video_dma_avalon_control_slave_agent_rdata_fifo_src_valid;          // video_dma_avalon_control_slave_agent:rdata_fifo_src_valid -> video_dma_avalon_control_slave_agent_rdata_fifo:in_valid
	wire  [33:0] video_dma_avalon_control_slave_agent_rdata_fifo_src_data;           // video_dma_avalon_control_slave_agent:rdata_fifo_src_data -> video_dma_avalon_control_slave_agent_rdata_fifo:in_data
	wire         video_dma_avalon_control_slave_agent_rdata_fifo_src_ready;          // video_dma_avalon_control_slave_agent_rdata_fifo:in_ready -> video_dma_avalon_control_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_valid;                                                  // cmd_mux:src_valid -> video_dma_avalon_control_slave_agent:cp_valid
	wire  [91:0] cmd_mux_src_data;                                                   // cmd_mux:src_data -> video_dma_avalon_control_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                  // video_dma_avalon_control_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [3:0] cmd_mux_src_channel;                                                // cmd_mux:src_channel -> video_dma_avalon_control_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                          // cmd_mux:src_startofpacket -> video_dma_avalon_control_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                            // cmd_mux:src_endofpacket -> video_dma_avalon_control_slave_agent:cp_endofpacket
	wire  [31:0] alt_vip_cl_mixer_0_control_agent_m0_readdata;                       // alt_vip_cl_mixer_0_control_translator:uav_readdata -> alt_vip_cl_mixer_0_control_agent:m0_readdata
	wire         alt_vip_cl_mixer_0_control_agent_m0_waitrequest;                    // alt_vip_cl_mixer_0_control_translator:uav_waitrequest -> alt_vip_cl_mixer_0_control_agent:m0_waitrequest
	wire         alt_vip_cl_mixer_0_control_agent_m0_debugaccess;                    // alt_vip_cl_mixer_0_control_agent:m0_debugaccess -> alt_vip_cl_mixer_0_control_translator:uav_debugaccess
	wire  [19:0] alt_vip_cl_mixer_0_control_agent_m0_address;                        // alt_vip_cl_mixer_0_control_agent:m0_address -> alt_vip_cl_mixer_0_control_translator:uav_address
	wire   [3:0] alt_vip_cl_mixer_0_control_agent_m0_byteenable;                     // alt_vip_cl_mixer_0_control_agent:m0_byteenable -> alt_vip_cl_mixer_0_control_translator:uav_byteenable
	wire         alt_vip_cl_mixer_0_control_agent_m0_read;                           // alt_vip_cl_mixer_0_control_agent:m0_read -> alt_vip_cl_mixer_0_control_translator:uav_read
	wire         alt_vip_cl_mixer_0_control_agent_m0_readdatavalid;                  // alt_vip_cl_mixer_0_control_translator:uav_readdatavalid -> alt_vip_cl_mixer_0_control_agent:m0_readdatavalid
	wire         alt_vip_cl_mixer_0_control_agent_m0_lock;                           // alt_vip_cl_mixer_0_control_agent:m0_lock -> alt_vip_cl_mixer_0_control_translator:uav_lock
	wire  [31:0] alt_vip_cl_mixer_0_control_agent_m0_writedata;                      // alt_vip_cl_mixer_0_control_agent:m0_writedata -> alt_vip_cl_mixer_0_control_translator:uav_writedata
	wire         alt_vip_cl_mixer_0_control_agent_m0_write;                          // alt_vip_cl_mixer_0_control_agent:m0_write -> alt_vip_cl_mixer_0_control_translator:uav_write
	wire   [2:0] alt_vip_cl_mixer_0_control_agent_m0_burstcount;                     // alt_vip_cl_mixer_0_control_agent:m0_burstcount -> alt_vip_cl_mixer_0_control_translator:uav_burstcount
	wire         alt_vip_cl_mixer_0_control_agent_rf_source_valid;                   // alt_vip_cl_mixer_0_control_agent:rf_source_valid -> alt_vip_cl_mixer_0_control_agent_rsp_fifo:in_valid
	wire  [92:0] alt_vip_cl_mixer_0_control_agent_rf_source_data;                    // alt_vip_cl_mixer_0_control_agent:rf_source_data -> alt_vip_cl_mixer_0_control_agent_rsp_fifo:in_data
	wire         alt_vip_cl_mixer_0_control_agent_rf_source_ready;                   // alt_vip_cl_mixer_0_control_agent_rsp_fifo:in_ready -> alt_vip_cl_mixer_0_control_agent:rf_source_ready
	wire         alt_vip_cl_mixer_0_control_agent_rf_source_startofpacket;           // alt_vip_cl_mixer_0_control_agent:rf_source_startofpacket -> alt_vip_cl_mixer_0_control_agent_rsp_fifo:in_startofpacket
	wire         alt_vip_cl_mixer_0_control_agent_rf_source_endofpacket;             // alt_vip_cl_mixer_0_control_agent:rf_source_endofpacket -> alt_vip_cl_mixer_0_control_agent_rsp_fifo:in_endofpacket
	wire         alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_valid;                // alt_vip_cl_mixer_0_control_agent_rsp_fifo:out_valid -> alt_vip_cl_mixer_0_control_agent:rf_sink_valid
	wire  [92:0] alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_data;                 // alt_vip_cl_mixer_0_control_agent_rsp_fifo:out_data -> alt_vip_cl_mixer_0_control_agent:rf_sink_data
	wire         alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_ready;                // alt_vip_cl_mixer_0_control_agent:rf_sink_ready -> alt_vip_cl_mixer_0_control_agent_rsp_fifo:out_ready
	wire         alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_startofpacket;        // alt_vip_cl_mixer_0_control_agent_rsp_fifo:out_startofpacket -> alt_vip_cl_mixer_0_control_agent:rf_sink_startofpacket
	wire         alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_endofpacket;          // alt_vip_cl_mixer_0_control_agent_rsp_fifo:out_endofpacket -> alt_vip_cl_mixer_0_control_agent:rf_sink_endofpacket
	wire         alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_valid;              // alt_vip_cl_mixer_0_control_agent:rdata_fifo_src_valid -> alt_vip_cl_mixer_0_control_agent_rdata_fifo:in_valid
	wire  [33:0] alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_data;               // alt_vip_cl_mixer_0_control_agent:rdata_fifo_src_data -> alt_vip_cl_mixer_0_control_agent_rdata_fifo:in_data
	wire         alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_ready;              // alt_vip_cl_mixer_0_control_agent_rdata_fifo:in_ready -> alt_vip_cl_mixer_0_control_agent:rdata_fifo_src_ready
	wire         cmd_mux_001_src_valid;                                              // cmd_mux_001:src_valid -> alt_vip_cl_mixer_0_control_agent:cp_valid
	wire  [91:0] cmd_mux_001_src_data;                                               // cmd_mux_001:src_data -> alt_vip_cl_mixer_0_control_agent:cp_data
	wire         cmd_mux_001_src_ready;                                              // alt_vip_cl_mixer_0_control_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [3:0] cmd_mux_001_src_channel;                                            // cmd_mux_001:src_channel -> alt_vip_cl_mixer_0_control_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                      // cmd_mux_001:src_startofpacket -> alt_vip_cl_mixer_0_control_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                        // cmd_mux_001:src_endofpacket -> alt_vip_cl_mixer_0_control_agent:cp_endofpacket
	wire  [31:0] dma_0_control_port_slave_agent_m0_readdata;                         // dma_0_control_port_slave_translator:uav_readdata -> dma_0_control_port_slave_agent:m0_readdata
	wire         dma_0_control_port_slave_agent_m0_waitrequest;                      // dma_0_control_port_slave_translator:uav_waitrequest -> dma_0_control_port_slave_agent:m0_waitrequest
	wire         dma_0_control_port_slave_agent_m0_debugaccess;                      // dma_0_control_port_slave_agent:m0_debugaccess -> dma_0_control_port_slave_translator:uav_debugaccess
	wire  [19:0] dma_0_control_port_slave_agent_m0_address;                          // dma_0_control_port_slave_agent:m0_address -> dma_0_control_port_slave_translator:uav_address
	wire   [3:0] dma_0_control_port_slave_agent_m0_byteenable;                       // dma_0_control_port_slave_agent:m0_byteenable -> dma_0_control_port_slave_translator:uav_byteenable
	wire         dma_0_control_port_slave_agent_m0_read;                             // dma_0_control_port_slave_agent:m0_read -> dma_0_control_port_slave_translator:uav_read
	wire         dma_0_control_port_slave_agent_m0_readdatavalid;                    // dma_0_control_port_slave_translator:uav_readdatavalid -> dma_0_control_port_slave_agent:m0_readdatavalid
	wire         dma_0_control_port_slave_agent_m0_lock;                             // dma_0_control_port_slave_agent:m0_lock -> dma_0_control_port_slave_translator:uav_lock
	wire  [31:0] dma_0_control_port_slave_agent_m0_writedata;                        // dma_0_control_port_slave_agent:m0_writedata -> dma_0_control_port_slave_translator:uav_writedata
	wire         dma_0_control_port_slave_agent_m0_write;                            // dma_0_control_port_slave_agent:m0_write -> dma_0_control_port_slave_translator:uav_write
	wire   [2:0] dma_0_control_port_slave_agent_m0_burstcount;                       // dma_0_control_port_slave_agent:m0_burstcount -> dma_0_control_port_slave_translator:uav_burstcount
	wire         dma_0_control_port_slave_agent_rf_source_valid;                     // dma_0_control_port_slave_agent:rf_source_valid -> dma_0_control_port_slave_agent_rsp_fifo:in_valid
	wire  [92:0] dma_0_control_port_slave_agent_rf_source_data;                      // dma_0_control_port_slave_agent:rf_source_data -> dma_0_control_port_slave_agent_rsp_fifo:in_data
	wire         dma_0_control_port_slave_agent_rf_source_ready;                     // dma_0_control_port_slave_agent_rsp_fifo:in_ready -> dma_0_control_port_slave_agent:rf_source_ready
	wire         dma_0_control_port_slave_agent_rf_source_startofpacket;             // dma_0_control_port_slave_agent:rf_source_startofpacket -> dma_0_control_port_slave_agent_rsp_fifo:in_startofpacket
	wire         dma_0_control_port_slave_agent_rf_source_endofpacket;               // dma_0_control_port_slave_agent:rf_source_endofpacket -> dma_0_control_port_slave_agent_rsp_fifo:in_endofpacket
	wire         dma_0_control_port_slave_agent_rsp_fifo_out_valid;                  // dma_0_control_port_slave_agent_rsp_fifo:out_valid -> dma_0_control_port_slave_agent:rf_sink_valid
	wire  [92:0] dma_0_control_port_slave_agent_rsp_fifo_out_data;                   // dma_0_control_port_slave_agent_rsp_fifo:out_data -> dma_0_control_port_slave_agent:rf_sink_data
	wire         dma_0_control_port_slave_agent_rsp_fifo_out_ready;                  // dma_0_control_port_slave_agent:rf_sink_ready -> dma_0_control_port_slave_agent_rsp_fifo:out_ready
	wire         dma_0_control_port_slave_agent_rsp_fifo_out_startofpacket;          // dma_0_control_port_slave_agent_rsp_fifo:out_startofpacket -> dma_0_control_port_slave_agent:rf_sink_startofpacket
	wire         dma_0_control_port_slave_agent_rsp_fifo_out_endofpacket;            // dma_0_control_port_slave_agent_rsp_fifo:out_endofpacket -> dma_0_control_port_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                              // cmd_mux_002:src_valid -> dma_0_control_port_slave_agent:cp_valid
	wire  [91:0] cmd_mux_002_src_data;                                               // cmd_mux_002:src_data -> dma_0_control_port_slave_agent:cp_data
	wire         cmd_mux_002_src_ready;                                              // dma_0_control_port_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [3:0] cmd_mux_002_src_channel;                                            // cmd_mux_002:src_channel -> dma_0_control_port_slave_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                      // cmd_mux_002:src_startofpacket -> dma_0_control_port_slave_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                        // cmd_mux_002:src_endofpacket -> dma_0_control_port_slave_agent:cp_endofpacket
	wire   [7:0] videocard_new_0_memory_control_agent_m0_readdata;                   // videocard_new_0_memory_control_translator:uav_readdata -> videocard_new_0_memory_control_agent:m0_readdata
	wire         videocard_new_0_memory_control_agent_m0_waitrequest;                // videocard_new_0_memory_control_translator:uav_waitrequest -> videocard_new_0_memory_control_agent:m0_waitrequest
	wire         videocard_new_0_memory_control_agent_m0_debugaccess;                // videocard_new_0_memory_control_agent:m0_debugaccess -> videocard_new_0_memory_control_translator:uav_debugaccess
	wire  [19:0] videocard_new_0_memory_control_agent_m0_address;                    // videocard_new_0_memory_control_agent:m0_address -> videocard_new_0_memory_control_translator:uav_address
	wire   [0:0] videocard_new_0_memory_control_agent_m0_byteenable;                 // videocard_new_0_memory_control_agent:m0_byteenable -> videocard_new_0_memory_control_translator:uav_byteenable
	wire         videocard_new_0_memory_control_agent_m0_read;                       // videocard_new_0_memory_control_agent:m0_read -> videocard_new_0_memory_control_translator:uav_read
	wire         videocard_new_0_memory_control_agent_m0_readdatavalid;              // videocard_new_0_memory_control_translator:uav_readdatavalid -> videocard_new_0_memory_control_agent:m0_readdatavalid
	wire         videocard_new_0_memory_control_agent_m0_lock;                       // videocard_new_0_memory_control_agent:m0_lock -> videocard_new_0_memory_control_translator:uav_lock
	wire   [7:0] videocard_new_0_memory_control_agent_m0_writedata;                  // videocard_new_0_memory_control_agent:m0_writedata -> videocard_new_0_memory_control_translator:uav_writedata
	wire         videocard_new_0_memory_control_agent_m0_write;                      // videocard_new_0_memory_control_agent:m0_write -> videocard_new_0_memory_control_translator:uav_write
	wire   [0:0] videocard_new_0_memory_control_agent_m0_burstcount;                 // videocard_new_0_memory_control_agent:m0_burstcount -> videocard_new_0_memory_control_translator:uav_burstcount
	wire         videocard_new_0_memory_control_agent_rf_source_valid;               // videocard_new_0_memory_control_agent:rf_source_valid -> videocard_new_0_memory_control_agent_rsp_fifo:in_valid
	wire  [65:0] videocard_new_0_memory_control_agent_rf_source_data;                // videocard_new_0_memory_control_agent:rf_source_data -> videocard_new_0_memory_control_agent_rsp_fifo:in_data
	wire         videocard_new_0_memory_control_agent_rf_source_ready;               // videocard_new_0_memory_control_agent_rsp_fifo:in_ready -> videocard_new_0_memory_control_agent:rf_source_ready
	wire         videocard_new_0_memory_control_agent_rf_source_startofpacket;       // videocard_new_0_memory_control_agent:rf_source_startofpacket -> videocard_new_0_memory_control_agent_rsp_fifo:in_startofpacket
	wire         videocard_new_0_memory_control_agent_rf_source_endofpacket;         // videocard_new_0_memory_control_agent:rf_source_endofpacket -> videocard_new_0_memory_control_agent_rsp_fifo:in_endofpacket
	wire         videocard_new_0_memory_control_agent_rsp_fifo_out_valid;            // videocard_new_0_memory_control_agent_rsp_fifo:out_valid -> videocard_new_0_memory_control_agent:rf_sink_valid
	wire  [65:0] videocard_new_0_memory_control_agent_rsp_fifo_out_data;             // videocard_new_0_memory_control_agent_rsp_fifo:out_data -> videocard_new_0_memory_control_agent:rf_sink_data
	wire         videocard_new_0_memory_control_agent_rsp_fifo_out_ready;            // videocard_new_0_memory_control_agent:rf_sink_ready -> videocard_new_0_memory_control_agent_rsp_fifo:out_ready
	wire         videocard_new_0_memory_control_agent_rsp_fifo_out_startofpacket;    // videocard_new_0_memory_control_agent_rsp_fifo:out_startofpacket -> videocard_new_0_memory_control_agent:rf_sink_startofpacket
	wire         videocard_new_0_memory_control_agent_rsp_fifo_out_endofpacket;      // videocard_new_0_memory_control_agent_rsp_fifo:out_endofpacket -> videocard_new_0_memory_control_agent:rf_sink_endofpacket
	wire         videocard_new_0_memory_control_agent_rdata_fifo_src_valid;          // videocard_new_0_memory_control_agent:rdata_fifo_src_valid -> videocard_new_0_memory_control_agent_rdata_fifo:in_valid
	wire   [9:0] videocard_new_0_memory_control_agent_rdata_fifo_src_data;           // videocard_new_0_memory_control_agent:rdata_fifo_src_data -> videocard_new_0_memory_control_agent_rdata_fifo:in_data
	wire         videocard_new_0_memory_control_agent_rdata_fifo_src_ready;          // videocard_new_0_memory_control_agent_rdata_fifo:in_ready -> videocard_new_0_memory_control_agent:rdata_fifo_src_ready
	wire         mm_bridge_0_m0_agent_cp_valid;                                      // mm_bridge_0_m0_agent:cp_valid -> router:sink_valid
	wire  [91:0] mm_bridge_0_m0_agent_cp_data;                                       // mm_bridge_0_m0_agent:cp_data -> router:sink_data
	wire         mm_bridge_0_m0_agent_cp_ready;                                      // router:sink_ready -> mm_bridge_0_m0_agent:cp_ready
	wire         mm_bridge_0_m0_agent_cp_startofpacket;                              // mm_bridge_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         mm_bridge_0_m0_agent_cp_endofpacket;                                // mm_bridge_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         video_dma_avalon_control_slave_agent_rp_valid;                      // video_dma_avalon_control_slave_agent:rp_valid -> router_001:sink_valid
	wire  [91:0] video_dma_avalon_control_slave_agent_rp_data;                       // video_dma_avalon_control_slave_agent:rp_data -> router_001:sink_data
	wire         video_dma_avalon_control_slave_agent_rp_ready;                      // router_001:sink_ready -> video_dma_avalon_control_slave_agent:rp_ready
	wire         video_dma_avalon_control_slave_agent_rp_startofpacket;              // video_dma_avalon_control_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         video_dma_avalon_control_slave_agent_rp_endofpacket;                // video_dma_avalon_control_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                               // router_001:src_valid -> rsp_demux:sink_valid
	wire  [91:0] router_001_src_data;                                                // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                               // rsp_demux:sink_ready -> router_001:src_ready
	wire   [3:0] router_001_src_channel;                                             // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                       // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                         // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         alt_vip_cl_mixer_0_control_agent_rp_valid;                          // alt_vip_cl_mixer_0_control_agent:rp_valid -> router_002:sink_valid
	wire  [91:0] alt_vip_cl_mixer_0_control_agent_rp_data;                           // alt_vip_cl_mixer_0_control_agent:rp_data -> router_002:sink_data
	wire         alt_vip_cl_mixer_0_control_agent_rp_ready;                          // router_002:sink_ready -> alt_vip_cl_mixer_0_control_agent:rp_ready
	wire         alt_vip_cl_mixer_0_control_agent_rp_startofpacket;                  // alt_vip_cl_mixer_0_control_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         alt_vip_cl_mixer_0_control_agent_rp_endofpacket;                    // alt_vip_cl_mixer_0_control_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                               // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [91:0] router_002_src_data;                                                // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                               // rsp_demux_001:sink_ready -> router_002:src_ready
	wire   [3:0] router_002_src_channel;                                             // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                       // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                         // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         dma_0_control_port_slave_agent_rp_valid;                            // dma_0_control_port_slave_agent:rp_valid -> router_003:sink_valid
	wire  [91:0] dma_0_control_port_slave_agent_rp_data;                             // dma_0_control_port_slave_agent:rp_data -> router_003:sink_data
	wire         dma_0_control_port_slave_agent_rp_ready;                            // router_003:sink_ready -> dma_0_control_port_slave_agent:rp_ready
	wire         dma_0_control_port_slave_agent_rp_startofpacket;                    // dma_0_control_port_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         dma_0_control_port_slave_agent_rp_endofpacket;                      // dma_0_control_port_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                               // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [91:0] router_003_src_data;                                                // router_003:src_data -> rsp_demux_002:sink_data
	wire         router_003_src_ready;                                               // rsp_demux_002:sink_ready -> router_003:src_ready
	wire   [3:0] router_003_src_channel;                                             // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_startofpacket;                                       // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_003_src_endofpacket;                                         // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         videocard_new_0_memory_control_agent_rp_valid;                      // videocard_new_0_memory_control_agent:rp_valid -> router_004:sink_valid
	wire  [64:0] videocard_new_0_memory_control_agent_rp_data;                       // videocard_new_0_memory_control_agent:rp_data -> router_004:sink_data
	wire         videocard_new_0_memory_control_agent_rp_ready;                      // router_004:sink_ready -> videocard_new_0_memory_control_agent:rp_ready
	wire         videocard_new_0_memory_control_agent_rp_startofpacket;              // videocard_new_0_memory_control_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         videocard_new_0_memory_control_agent_rp_endofpacket;                // videocard_new_0_memory_control_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_src_valid;                                                   // router:src_valid -> mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [91:0] router_src_data;                                                    // router:src_data -> mm_bridge_0_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                   // mm_bridge_0_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [3:0] router_src_channel;                                                 // router:src_channel -> mm_bridge_0_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                           // router:src_startofpacket -> mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                             // router:src_endofpacket -> mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [91:0] mm_bridge_0_m0_limiter_cmd_src_data;                                // mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         mm_bridge_0_m0_limiter_cmd_src_ready;                               // cmd_demux:sink_ready -> mm_bridge_0_m0_limiter:cmd_src_ready
	wire   [3:0] mm_bridge_0_m0_limiter_cmd_src_channel;                             // mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         mm_bridge_0_m0_limiter_cmd_src_startofpacket;                       // mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         mm_bridge_0_m0_limiter_cmd_src_endofpacket;                         // mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                  // rsp_mux:src_valid -> mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [91:0] rsp_mux_src_data;                                                   // rsp_mux:src_data -> mm_bridge_0_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                  // mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [3:0] rsp_mux_src_channel;                                                // rsp_mux:src_channel -> mm_bridge_0_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                          // rsp_mux:src_startofpacket -> mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                            // rsp_mux:src_endofpacket -> mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire         mm_bridge_0_m0_limiter_rsp_src_valid;                               // mm_bridge_0_m0_limiter:rsp_src_valid -> mm_bridge_0_m0_agent:rp_valid
	wire  [91:0] mm_bridge_0_m0_limiter_rsp_src_data;                                // mm_bridge_0_m0_limiter:rsp_src_data -> mm_bridge_0_m0_agent:rp_data
	wire         mm_bridge_0_m0_limiter_rsp_src_ready;                               // mm_bridge_0_m0_agent:rp_ready -> mm_bridge_0_m0_limiter:rsp_src_ready
	wire   [3:0] mm_bridge_0_m0_limiter_rsp_src_channel;                             // mm_bridge_0_m0_limiter:rsp_src_channel -> mm_bridge_0_m0_agent:rp_channel
	wire         mm_bridge_0_m0_limiter_rsp_src_startofpacket;                       // mm_bridge_0_m0_limiter:rsp_src_startofpacket -> mm_bridge_0_m0_agent:rp_startofpacket
	wire         mm_bridge_0_m0_limiter_rsp_src_endofpacket;                         // mm_bridge_0_m0_limiter:rsp_src_endofpacket -> mm_bridge_0_m0_agent:rp_endofpacket
	wire         videocard_new_0_memory_control_burst_adapter_source0_valid;         // videocard_new_0_memory_control_burst_adapter:source0_valid -> videocard_new_0_memory_control_agent:cp_valid
	wire  [64:0] videocard_new_0_memory_control_burst_adapter_source0_data;          // videocard_new_0_memory_control_burst_adapter:source0_data -> videocard_new_0_memory_control_agent:cp_data
	wire         videocard_new_0_memory_control_burst_adapter_source0_ready;         // videocard_new_0_memory_control_agent:cp_ready -> videocard_new_0_memory_control_burst_adapter:source0_ready
	wire   [3:0] videocard_new_0_memory_control_burst_adapter_source0_channel;       // videocard_new_0_memory_control_burst_adapter:source0_channel -> videocard_new_0_memory_control_agent:cp_channel
	wire         videocard_new_0_memory_control_burst_adapter_source0_startofpacket; // videocard_new_0_memory_control_burst_adapter:source0_startofpacket -> videocard_new_0_memory_control_agent:cp_startofpacket
	wire         videocard_new_0_memory_control_burst_adapter_source0_endofpacket;   // videocard_new_0_memory_control_burst_adapter:source0_endofpacket -> videocard_new_0_memory_control_agent:cp_endofpacket
	wire         cmd_demux_src2_valid;                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [91:0] cmd_demux_src2_data;                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [3:0] cmd_demux_src2_channel;                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         rsp_demux_002_src0_valid;                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [91:0] rsp_demux_002_src0_data;                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [3:0] rsp_demux_002_src0_channel;                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         router_004_src_valid;                                               // router_004:src_valid -> videocard_new_0_memory_control_rsp_width_adapter:in_valid
	wire  [64:0] router_004_src_data;                                                // router_004:src_data -> videocard_new_0_memory_control_rsp_width_adapter:in_data
	wire         router_004_src_ready;                                               // videocard_new_0_memory_control_rsp_width_adapter:in_ready -> router_004:src_ready
	wire   [3:0] router_004_src_channel;                                             // router_004:src_channel -> videocard_new_0_memory_control_rsp_width_adapter:in_channel
	wire         router_004_src_startofpacket;                                       // router_004:src_startofpacket -> videocard_new_0_memory_control_rsp_width_adapter:in_startofpacket
	wire         router_004_src_endofpacket;                                         // router_004:src_endofpacket -> videocard_new_0_memory_control_rsp_width_adapter:in_endofpacket
	wire         videocard_new_0_memory_control_rsp_width_adapter_src_valid;         // videocard_new_0_memory_control_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [91:0] videocard_new_0_memory_control_rsp_width_adapter_src_data;          // videocard_new_0_memory_control_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire         videocard_new_0_memory_control_rsp_width_adapter_src_ready;         // rsp_demux_003:sink_ready -> videocard_new_0_memory_control_rsp_width_adapter:out_ready
	wire   [3:0] videocard_new_0_memory_control_rsp_width_adapter_src_channel;       // videocard_new_0_memory_control_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire         videocard_new_0_memory_control_rsp_width_adapter_src_startofpacket; // videocard_new_0_memory_control_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         videocard_new_0_memory_control_rsp_width_adapter_src_endofpacket;   // videocard_new_0_memory_control_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         cmd_mux_003_src_valid;                                              // cmd_mux_003:src_valid -> videocard_new_0_memory_control_cmd_width_adapter:in_valid
	wire  [91:0] cmd_mux_003_src_data;                                               // cmd_mux_003:src_data -> videocard_new_0_memory_control_cmd_width_adapter:in_data
	wire         cmd_mux_003_src_ready;                                              // videocard_new_0_memory_control_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire   [3:0] cmd_mux_003_src_channel;                                            // cmd_mux_003:src_channel -> videocard_new_0_memory_control_cmd_width_adapter:in_channel
	wire         cmd_mux_003_src_startofpacket;                                      // cmd_mux_003:src_startofpacket -> videocard_new_0_memory_control_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                        // cmd_mux_003:src_endofpacket -> videocard_new_0_memory_control_cmd_width_adapter:in_endofpacket
	wire         videocard_new_0_memory_control_cmd_width_adapter_src_valid;         // videocard_new_0_memory_control_cmd_width_adapter:out_valid -> videocard_new_0_memory_control_burst_adapter:sink0_valid
	wire  [64:0] videocard_new_0_memory_control_cmd_width_adapter_src_data;          // videocard_new_0_memory_control_cmd_width_adapter:out_data -> videocard_new_0_memory_control_burst_adapter:sink0_data
	wire         videocard_new_0_memory_control_cmd_width_adapter_src_ready;         // videocard_new_0_memory_control_burst_adapter:sink0_ready -> videocard_new_0_memory_control_cmd_width_adapter:out_ready
	wire   [3:0] videocard_new_0_memory_control_cmd_width_adapter_src_channel;       // videocard_new_0_memory_control_cmd_width_adapter:out_channel -> videocard_new_0_memory_control_burst_adapter:sink0_channel
	wire         videocard_new_0_memory_control_cmd_width_adapter_src_startofpacket; // videocard_new_0_memory_control_cmd_width_adapter:out_startofpacket -> videocard_new_0_memory_control_burst_adapter:sink0_startofpacket
	wire         videocard_new_0_memory_control_cmd_width_adapter_src_endofpacket;   // videocard_new_0_memory_control_cmd_width_adapter:out_endofpacket -> videocard_new_0_memory_control_burst_adapter:sink0_endofpacket
	wire         cmd_demux_src0_valid;                                               // cmd_demux:src0_valid -> crosser:in_valid
	wire  [91:0] cmd_demux_src0_data;                                                // cmd_demux:src0_data -> crosser:in_data
	wire         cmd_demux_src0_ready;                                               // crosser:in_ready -> cmd_demux:src0_ready
	wire   [3:0] cmd_demux_src0_channel;                                             // cmd_demux:src0_channel -> crosser:in_channel
	wire         cmd_demux_src0_startofpacket;                                       // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire         cmd_demux_src0_endofpacket;                                         // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire         crosser_out_valid;                                                  // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [91:0] crosser_out_data;                                                   // crosser:out_data -> cmd_mux:sink0_data
	wire         crosser_out_ready;                                                  // cmd_mux:sink0_ready -> crosser:out_ready
	wire   [3:0] crosser_out_channel;                                                // crosser:out_channel -> cmd_mux:sink0_channel
	wire         crosser_out_startofpacket;                                          // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire         crosser_out_endofpacket;                                            // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                               // cmd_demux:src1_valid -> crosser_001:in_valid
	wire  [91:0] cmd_demux_src1_data;                                                // cmd_demux:src1_data -> crosser_001:in_data
	wire         cmd_demux_src1_ready;                                               // crosser_001:in_ready -> cmd_demux:src1_ready
	wire   [3:0] cmd_demux_src1_channel;                                             // cmd_demux:src1_channel -> crosser_001:in_channel
	wire         cmd_demux_src1_startofpacket;                                       // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire         cmd_demux_src1_endofpacket;                                         // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire         crosser_001_out_valid;                                              // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [91:0] crosser_001_out_data;                                               // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire         crosser_001_out_ready;                                              // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire   [3:0] crosser_001_out_channel;                                            // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire         crosser_001_out_startofpacket;                                      // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         crosser_001_out_endofpacket;                                        // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                               // cmd_demux:src3_valid -> crosser_002:in_valid
	wire  [91:0] cmd_demux_src3_data;                                                // cmd_demux:src3_data -> crosser_002:in_data
	wire         cmd_demux_src3_ready;                                               // crosser_002:in_ready -> cmd_demux:src3_ready
	wire   [3:0] cmd_demux_src3_channel;                                             // cmd_demux:src3_channel -> crosser_002:in_channel
	wire         cmd_demux_src3_startofpacket;                                       // cmd_demux:src3_startofpacket -> crosser_002:in_startofpacket
	wire         cmd_demux_src3_endofpacket;                                         // cmd_demux:src3_endofpacket -> crosser_002:in_endofpacket
	wire         crosser_002_out_valid;                                              // crosser_002:out_valid -> cmd_mux_003:sink0_valid
	wire  [91:0] crosser_002_out_data;                                               // crosser_002:out_data -> cmd_mux_003:sink0_data
	wire         crosser_002_out_ready;                                              // cmd_mux_003:sink0_ready -> crosser_002:out_ready
	wire   [3:0] crosser_002_out_channel;                                            // crosser_002:out_channel -> cmd_mux_003:sink0_channel
	wire         crosser_002_out_startofpacket;                                      // crosser_002:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         crosser_002_out_endofpacket;                                        // crosser_002:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                               // rsp_demux:src0_valid -> crosser_003:in_valid
	wire  [91:0] rsp_demux_src0_data;                                                // rsp_demux:src0_data -> crosser_003:in_data
	wire         rsp_demux_src0_ready;                                               // crosser_003:in_ready -> rsp_demux:src0_ready
	wire   [3:0] rsp_demux_src0_channel;                                             // rsp_demux:src0_channel -> crosser_003:in_channel
	wire         rsp_demux_src0_startofpacket;                                       // rsp_demux:src0_startofpacket -> crosser_003:in_startofpacket
	wire         rsp_demux_src0_endofpacket;                                         // rsp_demux:src0_endofpacket -> crosser_003:in_endofpacket
	wire         crosser_003_out_valid;                                              // crosser_003:out_valid -> rsp_mux:sink0_valid
	wire  [91:0] crosser_003_out_data;                                               // crosser_003:out_data -> rsp_mux:sink0_data
	wire         crosser_003_out_ready;                                              // rsp_mux:sink0_ready -> crosser_003:out_ready
	wire   [3:0] crosser_003_out_channel;                                            // crosser_003:out_channel -> rsp_mux:sink0_channel
	wire         crosser_003_out_startofpacket;                                      // crosser_003:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire         crosser_003_out_endofpacket;                                        // crosser_003:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                           // rsp_demux_001:src0_valid -> crosser_004:in_valid
	wire  [91:0] rsp_demux_001_src0_data;                                            // rsp_demux_001:src0_data -> crosser_004:in_data
	wire         rsp_demux_001_src0_ready;                                           // crosser_004:in_ready -> rsp_demux_001:src0_ready
	wire   [3:0] rsp_demux_001_src0_channel;                                         // rsp_demux_001:src0_channel -> crosser_004:in_channel
	wire         rsp_demux_001_src0_startofpacket;                                   // rsp_demux_001:src0_startofpacket -> crosser_004:in_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                     // rsp_demux_001:src0_endofpacket -> crosser_004:in_endofpacket
	wire         crosser_004_out_valid;                                              // crosser_004:out_valid -> rsp_mux:sink1_valid
	wire  [91:0] crosser_004_out_data;                                               // crosser_004:out_data -> rsp_mux:sink1_data
	wire         crosser_004_out_ready;                                              // rsp_mux:sink1_ready -> crosser_004:out_ready
	wire   [3:0] crosser_004_out_channel;                                            // crosser_004:out_channel -> rsp_mux:sink1_channel
	wire         crosser_004_out_startofpacket;                                      // crosser_004:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire         crosser_004_out_endofpacket;                                        // crosser_004:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_003_src0_valid;                                           // rsp_demux_003:src0_valid -> crosser_005:in_valid
	wire  [91:0] rsp_demux_003_src0_data;                                            // rsp_demux_003:src0_data -> crosser_005:in_data
	wire         rsp_demux_003_src0_ready;                                           // crosser_005:in_ready -> rsp_demux_003:src0_ready
	wire   [3:0] rsp_demux_003_src0_channel;                                         // rsp_demux_003:src0_channel -> crosser_005:in_channel
	wire         rsp_demux_003_src0_startofpacket;                                   // rsp_demux_003:src0_startofpacket -> crosser_005:in_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                     // rsp_demux_003:src0_endofpacket -> crosser_005:in_endofpacket
	wire         crosser_005_out_valid;                                              // crosser_005:out_valid -> rsp_mux:sink3_valid
	wire  [91:0] crosser_005_out_data;                                               // crosser_005:out_data -> rsp_mux:sink3_data
	wire         crosser_005_out_ready;                                              // rsp_mux:sink3_ready -> crosser_005:out_ready
	wire   [3:0] crosser_005_out_channel;                                            // crosser_005:out_channel -> rsp_mux:sink3_channel
	wire         crosser_005_out_startofpacket;                                      // crosser_005:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire         crosser_005_out_endofpacket;                                        // crosser_005:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire   [3:0] mm_bridge_0_m0_limiter_cmd_valid_data;                              // mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         video_dma_avalon_control_slave_agent_rdata_fifo_out_valid;          // video_dma_avalon_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] video_dma_avalon_control_slave_agent_rdata_fifo_out_data;           // video_dma_avalon_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire         video_dma_avalon_control_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter:in_0_ready -> video_dma_avalon_control_slave_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_out_0_valid;                                      // avalon_st_adapter:out_0_valid -> video_dma_avalon_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                       // avalon_st_adapter:out_0_data -> video_dma_avalon_control_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                      // video_dma_avalon_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                      // avalon_st_adapter:out_0_error -> video_dma_avalon_control_slave_agent:rdata_fifo_sink_error
	wire         alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_valid;              // alt_vip_cl_mixer_0_control_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_data;               // alt_vip_cl_mixer_0_control_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire         alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_ready;              // avalon_st_adapter_001:in_0_ready -> alt_vip_cl_mixer_0_control_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_001_out_0_valid;                                  // avalon_st_adapter_001:out_0_valid -> alt_vip_cl_mixer_0_control_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                   // avalon_st_adapter_001:out_0_data -> alt_vip_cl_mixer_0_control_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                  // alt_vip_cl_mixer_0_control_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                  // avalon_st_adapter_001:out_0_error -> alt_vip_cl_mixer_0_control_agent:rdata_fifo_sink_error
	wire         dma_0_control_port_slave_agent_rdata_fifo_src_valid;                // dma_0_control_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] dma_0_control_port_slave_agent_rdata_fifo_src_data;                 // dma_0_control_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         dma_0_control_port_slave_agent_rdata_fifo_src_ready;                // avalon_st_adapter_002:in_0_ready -> dma_0_control_port_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                  // avalon_st_adapter_002:out_0_valid -> dma_0_control_port_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                   // avalon_st_adapter_002:out_0_data -> dma_0_control_port_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                  // dma_0_control_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                  // avalon_st_adapter_002:out_0_error -> dma_0_control_port_slave_agent:rdata_fifo_sink_error
	wire         videocard_new_0_memory_control_agent_rdata_fifo_out_valid;          // videocard_new_0_memory_control_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [9:0] videocard_new_0_memory_control_agent_rdata_fifo_out_data;           // videocard_new_0_memory_control_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire         videocard_new_0_memory_control_agent_rdata_fifo_out_ready;          // avalon_st_adapter_003:in_0_ready -> videocard_new_0_memory_control_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_003_out_0_valid;                                  // avalon_st_adapter_003:out_0_valid -> videocard_new_0_memory_control_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_003_out_0_data;                                   // avalon_st_adapter_003:out_0_data -> videocard_new_0_memory_control_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                  // videocard_new_0_memory_control_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                  // avalon_st_adapter_003:out_0_error -> videocard_new_0_memory_control_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (20),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (20),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_0_m0_translator (
		.clk                    (sys_pll_sys_clk_clk),                                               //                       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                              //               (terminated)
		.av_lock                (1'b0),                                                              //               (terminated)
		.uav_clken              (),                                                                  //               (terminated)
		.av_clken               (1'b1),                                                              //               (terminated)
		.uav_response           (2'b00),                                                             //               (terminated)
		.av_response            (),                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                   //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_dma_avalon_control_slave_translator (
		.clk                    (pll_0_outclk0_clk),                                     //                      clk.clk
		.reset                  (video_dma_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (video_dma_avalon_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_dma_avalon_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_dma_avalon_control_slave_agent_m0_read),          //                         .read
		.uav_write              (video_dma_avalon_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_dma_avalon_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_dma_avalon_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_dma_avalon_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_dma_avalon_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_dma_avalon_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_dma_avalon_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_dma_avalon_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (video_dma_avalon_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (video_dma_avalon_control_slave_write),                  //                         .write
		.av_read                (video_dma_avalon_control_slave_read),                   //                         .read
		.av_readdata            (video_dma_avalon_control_slave_readdata),               //                         .readdata
		.av_writedata           (video_dma_avalon_control_slave_writedata),              //                         .writedata
		.av_byteenable          (video_dma_avalon_control_slave_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (7),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alt_vip_cl_mixer_0_control_translator (
		.clk                    (pll_0_outclk0_clk),                                 //                      clk.clk
		.reset                  (video_dma_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (alt_vip_cl_mixer_0_control_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (alt_vip_cl_mixer_0_control_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (alt_vip_cl_mixer_0_control_agent_m0_read),          //                         .read
		.uav_write              (alt_vip_cl_mixer_0_control_agent_m0_write),         //                         .write
		.uav_waitrequest        (alt_vip_cl_mixer_0_control_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (alt_vip_cl_mixer_0_control_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (alt_vip_cl_mixer_0_control_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (alt_vip_cl_mixer_0_control_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (alt_vip_cl_mixer_0_control_agent_m0_writedata),     //                         .writedata
		.uav_lock               (alt_vip_cl_mixer_0_control_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (alt_vip_cl_mixer_0_control_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (alt_vip_cl_mixer_0_control_address),                //      avalon_anti_slave_0.address
		.av_write               (alt_vip_cl_mixer_0_control_write),                  //                         .write
		.av_read                (alt_vip_cl_mixer_0_control_read),                   //                         .read
		.av_readdata            (alt_vip_cl_mixer_0_control_readdata),               //                         .readdata
		.av_writedata           (alt_vip_cl_mixer_0_control_writedata),              //                         .writedata
		.av_byteenable          (alt_vip_cl_mixer_0_control_byteenable),             //                         .byteenable
		.av_readdatavalid       (alt_vip_cl_mixer_0_control_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (alt_vip_cl_mixer_0_control_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_0_control_port_slave_translator (
		.clk                    (sys_pll_sys_clk_clk),                             //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (dma_0_control_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dma_0_control_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dma_0_control_port_slave_agent_m0_read),          //                         .read
		.uav_write              (dma_0_control_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (dma_0_control_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dma_0_control_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dma_0_control_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dma_0_control_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dma_0_control_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dma_0_control_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dma_0_control_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (dma_0_control_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (dma_0_control_port_slave_write),                  //                         .write
		.av_readdata            (dma_0_control_port_slave_readdata),               //                         .readdata
		.av_writedata           (dma_0_control_port_slave_writedata),              //                         .writedata
		.av_chipselect          (dma_0_control_port_slave_chipselect),             //                         .chipselect
		.av_read                (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) videocard_new_0_memory_control_translator (
		.clk                    (pll_0_outclk2_clk),                                      //                      clk.clk
		.reset                  (videocard_new_0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (videocard_new_0_memory_control_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (videocard_new_0_memory_control_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (videocard_new_0_memory_control_agent_m0_read),           //                         .read
		.uav_write              (videocard_new_0_memory_control_agent_m0_write),          //                         .write
		.uav_waitrequest        (videocard_new_0_memory_control_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (videocard_new_0_memory_control_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (videocard_new_0_memory_control_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (videocard_new_0_memory_control_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (videocard_new_0_memory_control_agent_m0_writedata),      //                         .writedata
		.uav_lock               (videocard_new_0_memory_control_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (videocard_new_0_memory_control_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (videocard_new_0_memory_control_address),                 //      avalon_anti_slave_0.address
		.av_write               (videocard_new_0_memory_control_write),                   //                         .write
		.av_read                (videocard_new_0_memory_control_read),                    //                         .read
		.av_readdata            (videocard_new_0_memory_control_readdata),                //                         .readdata
		.av_writedata           (videocard_new_0_memory_control_writedata),               //                         .writedata
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_QOS_H                 (74),
		.PKT_QOS_L                 (74),
		.PKT_DATA_SIDEBAND_H       (72),
		.PKT_DATA_SIDEBAND_L       (72),
		.PKT_ADDR_SIDEBAND_H       (71),
		.PKT_ADDR_SIDEBAND_L       (71),
		.PKT_BURST_TYPE_H          (70),
		.PKT_BURST_TYPE_L          (69),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_EXCLUSIVE       (61),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (77),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_0_m0_agent (
		.clk                   (sys_pll_sys_clk_clk),                                               //       clk.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (77),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_dma_avalon_control_slave_agent (
		.clk                     (pll_0_outclk0_clk),                                               //             clk.clk
		.reset                   (video_dma_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (video_dma_avalon_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (video_dma_avalon_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (video_dma_avalon_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (video_dma_avalon_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (video_dma_avalon_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (video_dma_avalon_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (video_dma_avalon_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (video_dma_avalon_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (video_dma_avalon_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (video_dma_avalon_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (video_dma_avalon_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (video_dma_avalon_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (video_dma_avalon_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (video_dma_avalon_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (video_dma_avalon_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (video_dma_avalon_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                               //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                               //                .valid
		.cp_data                 (cmd_mux_src_data),                                                //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                         //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                             //                .channel
		.rf_sink_ready           (video_dma_avalon_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (video_dma_avalon_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (video_dma_avalon_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (video_dma_avalon_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (video_dma_avalon_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (video_dma_avalon_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (video_dma_avalon_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (video_dma_avalon_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (video_dma_avalon_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (video_dma_avalon_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (video_dma_avalon_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_dma_avalon_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (video_dma_avalon_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_dma_avalon_control_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                               //       clk.clk
		.reset             (video_dma_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (video_dma_avalon_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_dma_avalon_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_dma_avalon_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_dma_avalon_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_dma_avalon_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_dma_avalon_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_dma_avalon_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_dma_avalon_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_dma_avalon_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_dma_avalon_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_dma_avalon_control_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                         //       clk.clk
		.reset             (video_dma_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (video_dma_avalon_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (video_dma_avalon_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (video_dma_avalon_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (video_dma_avalon_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (video_dma_avalon_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (video_dma_avalon_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (77),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) alt_vip_cl_mixer_0_control_agent (
		.clk                     (pll_0_outclk0_clk),                                           //             clk.clk
		.reset                   (video_dma_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (alt_vip_cl_mixer_0_control_agent_m0_address),                 //              m0.address
		.m0_burstcount           (alt_vip_cl_mixer_0_control_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (alt_vip_cl_mixer_0_control_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (alt_vip_cl_mixer_0_control_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (alt_vip_cl_mixer_0_control_agent_m0_lock),                    //                .lock
		.m0_readdata             (alt_vip_cl_mixer_0_control_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (alt_vip_cl_mixer_0_control_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (alt_vip_cl_mixer_0_control_agent_m0_read),                    //                .read
		.m0_waitrequest          (alt_vip_cl_mixer_0_control_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (alt_vip_cl_mixer_0_control_agent_m0_writedata),               //                .writedata
		.m0_write                (alt_vip_cl_mixer_0_control_agent_m0_write),                   //                .write
		.rp_endofpacket          (alt_vip_cl_mixer_0_control_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (alt_vip_cl_mixer_0_control_agent_rp_ready),                   //                .ready
		.rp_valid                (alt_vip_cl_mixer_0_control_agent_rp_valid),                   //                .valid
		.rp_data                 (alt_vip_cl_mixer_0_control_agent_rp_data),                    //                .data
		.rp_startofpacket        (alt_vip_cl_mixer_0_control_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                     //                .channel
		.rf_sink_ready           (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (alt_vip_cl_mixer_0_control_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (alt_vip_cl_mixer_0_control_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (alt_vip_cl_mixer_0_control_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (alt_vip_cl_mixer_0_control_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (alt_vip_cl_mixer_0_control_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_cl_mixer_0_control_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                           //       clk.clk
		.reset             (video_dma_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (alt_vip_cl_mixer_0_control_agent_rf_source_data),             //        in.data
		.in_valid          (alt_vip_cl_mixer_0_control_agent_rf_source_valid),            //          .valid
		.in_ready          (alt_vip_cl_mixer_0_control_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (alt_vip_cl_mixer_0_control_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (alt_vip_cl_mixer_0_control_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_cl_mixer_0_control_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                     //       clk.clk
		.reset             (video_dma_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (77),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_0_control_port_slave_agent (
		.clk                     (sys_pll_sys_clk_clk),                                       //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (dma_0_control_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_0_control_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_0_control_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_0_control_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_0_control_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_0_control_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_0_control_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_0_control_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_0_control_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_0_control_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_0_control_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_0_control_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_0_control_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_0_control_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_0_control_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_0_control_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                   //                .channel
		.rf_sink_ready           (dma_0_control_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_0_control_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_0_control_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_0_control_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_0_control_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_0_control_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_0_control_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_0_control_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_0_control_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_0_control_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (dma_0_control_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_0_control_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_0_control_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_0_control_port_slave_agent_rsp_fifo (
		.clk               (sys_pll_sys_clk_clk),                                       //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (dma_0_control_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_0_control_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_0_control_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_0_control_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_0_control_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_0_control_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_0_control_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_0_control_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_0_control_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_0_control_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (64),
		.PKT_ORI_BURST_SIZE_L      (62),
		.PKT_RESPONSE_STATUS_H     (61),
		.PKT_RESPONSE_STATUS_L     (60),
		.PKT_BURST_SIZE_H          (41),
		.PKT_BURST_SIZE_L          (39),
		.PKT_TRANS_LOCK            (33),
		.PKT_BEGIN_BURST           (46),
		.PKT_PROTECTION_H          (55),
		.PKT_PROTECTION_L          (53),
		.PKT_BURSTWRAP_H           (38),
		.PKT_BURSTWRAP_L           (38),
		.PKT_BYTE_CNT_H            (37),
		.PKT_BYTE_CNT_L            (35),
		.PKT_ADDR_H                (28),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (29),
		.PKT_TRANS_POSTED          (30),
		.PKT_TRANS_WRITE           (31),
		.PKT_TRANS_READ            (32),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (49),
		.PKT_SRC_ID_L              (48),
		.PKT_DEST_ID_H             (51),
		.PKT_DEST_ID_L             (50),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (65),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) videocard_new_0_memory_control_agent (
		.clk                     (pll_0_outclk2_clk),                                                  //             clk.clk
		.reset                   (videocard_new_0_reset_sink_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (videocard_new_0_memory_control_agent_m0_address),                    //              m0.address
		.m0_burstcount           (videocard_new_0_memory_control_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (videocard_new_0_memory_control_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (videocard_new_0_memory_control_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (videocard_new_0_memory_control_agent_m0_lock),                       //                .lock
		.m0_readdata             (videocard_new_0_memory_control_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (videocard_new_0_memory_control_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (videocard_new_0_memory_control_agent_m0_read),                       //                .read
		.m0_waitrequest          (videocard_new_0_memory_control_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (videocard_new_0_memory_control_agent_m0_writedata),                  //                .writedata
		.m0_write                (videocard_new_0_memory_control_agent_m0_write),                      //                .write
		.rp_endofpacket          (videocard_new_0_memory_control_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (videocard_new_0_memory_control_agent_rp_ready),                      //                .ready
		.rp_valid                (videocard_new_0_memory_control_agent_rp_valid),                      //                .valid
		.rp_data                 (videocard_new_0_memory_control_agent_rp_data),                       //                .data
		.rp_startofpacket        (videocard_new_0_memory_control_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (videocard_new_0_memory_control_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (videocard_new_0_memory_control_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (videocard_new_0_memory_control_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (videocard_new_0_memory_control_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (videocard_new_0_memory_control_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (videocard_new_0_memory_control_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (videocard_new_0_memory_control_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (videocard_new_0_memory_control_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (videocard_new_0_memory_control_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (videocard_new_0_memory_control_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (videocard_new_0_memory_control_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (videocard_new_0_memory_control_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (videocard_new_0_memory_control_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (videocard_new_0_memory_control_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (videocard_new_0_memory_control_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (videocard_new_0_memory_control_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (videocard_new_0_memory_control_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (videocard_new_0_memory_control_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (videocard_new_0_memory_control_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) videocard_new_0_memory_control_agent_rsp_fifo (
		.clk               (pll_0_outclk2_clk),                                               //       clk.clk
		.reset             (videocard_new_0_reset_sink_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (videocard_new_0_memory_control_agent_rf_source_data),             //        in.data
		.in_valid          (videocard_new_0_memory_control_agent_rf_source_valid),            //          .valid
		.in_ready          (videocard_new_0_memory_control_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (videocard_new_0_memory_control_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (videocard_new_0_memory_control_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (videocard_new_0_memory_control_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (videocard_new_0_memory_control_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (videocard_new_0_memory_control_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (videocard_new_0_memory_control_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (videocard_new_0_memory_control_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) videocard_new_0_memory_control_agent_rdata_fifo (
		.clk               (pll_0_outclk2_clk),                                         //       clk.clk
		.reset             (videocard_new_0_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (videocard_new_0_memory_control_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (videocard_new_0_memory_control_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (videocard_new_0_memory_control_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (videocard_new_0_memory_control_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (videocard_new_0_memory_control_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (videocard_new_0_memory_control_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	soc_system_mm_interconnect_2_router router (
		.sink_ready         (mm_bridge_0_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (mm_bridge_0_m0_agent_cp_valid),                 //          .valid
		.sink_data          (mm_bridge_0_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (mm_bridge_0_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (sys_pll_sys_clk_clk),                           //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_001 router_001 (
		.sink_ready         (video_dma_avalon_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_dma_avalon_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_dma_avalon_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_dma_avalon_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_dma_avalon_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                     //       clk.clk
		.reset              (video_dma_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_001_src_ready),                                  //       src.ready
		.src_valid          (router_001_src_valid),                                  //          .valid
		.src_data           (router_001_src_data),                                   //          .data
		.src_channel        (router_001_src_channel),                                //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_001 router_002 (
		.sink_ready         (alt_vip_cl_mixer_0_control_agent_rp_ready),         //      sink.ready
		.sink_valid         (alt_vip_cl_mixer_0_control_agent_rp_valid),         //          .valid
		.sink_data          (alt_vip_cl_mixer_0_control_agent_rp_data),          //          .data
		.sink_startofpacket (alt_vip_cl_mixer_0_control_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (alt_vip_cl_mixer_0_control_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                 //       clk.clk
		.reset              (video_dma_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_002_src_ready),                              //       src.ready
		.src_valid          (router_002_src_valid),                              //          .valid
		.src_data           (router_002_src_data),                               //          .data
		.src_channel        (router_002_src_channel),                            //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_001 router_003 (
		.sink_ready         (dma_0_control_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_0_control_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_0_control_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_0_control_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_0_control_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_pll_sys_clk_clk),                             //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_003_src_ready),                            //       src.ready
		.src_valid          (router_003_src_valid),                            //          .valid
		.src_data           (router_003_src_data),                             //          .data
		.src_channel        (router_003_src_channel),                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_004 router_004 (
		.sink_ready         (videocard_new_0_memory_control_agent_rp_ready),          //      sink.ready
		.sink_valid         (videocard_new_0_memory_control_agent_rp_valid),          //          .valid
		.sink_data          (videocard_new_0_memory_control_agent_rp_data),           //          .data
		.sink_startofpacket (videocard_new_0_memory_control_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (videocard_new_0_memory_control_agent_rp_endofpacket),    //          .endofpacket
		.clk                (pll_0_outclk2_clk),                                      //       clk.clk
		.reset              (videocard_new_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                   //       src.ready
		.src_valid          (router_004_src_valid),                                   //          .valid
		.src_data           (router_004_src_data),                                    //          .data
		.src_channel        (router_004_src_channel),                                 //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                              //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (77),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (75),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mm_bridge_0_m0_limiter (
		.clk                    (sys_pll_sys_clk_clk),                           //       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                              //          .valid
		.cmd_sink_data          (router_src_data),                               //          .data
		.cmd_sink_channel       (router_src_channel),                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                        //          .endofpacket
		.cmd_src_ready          (mm_bridge_0_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (mm_bridge_0_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (mm_bridge_0_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                             //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                             //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                           //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                              //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                     //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                       //          .endofpacket
		.rsp_src_ready          (mm_bridge_0_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (mm_bridge_0_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (mm_bridge_0_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (mm_bridge_0_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (mm_bridge_0_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (mm_bridge_0_m0_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (mm_bridge_0_m0_limiter_cmd_valid_data)          // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (28),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (46),
		.PKT_BYTE_CNT_H            (37),
		.PKT_BYTE_CNT_L            (35),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (41),
		.PKT_BURST_SIZE_L          (39),
		.PKT_BURST_TYPE_H          (43),
		.PKT_BURST_TYPE_L          (42),
		.PKT_BURSTWRAP_H           (38),
		.PKT_BURSTWRAP_L           (38),
		.PKT_TRANS_COMPRESSED_READ (29),
		.PKT_TRANS_WRITE           (31),
		.PKT_TRANS_READ            (32),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (65),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (35),
		.OUT_BURSTWRAP_H           (38),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) videocard_new_0_memory_control_burst_adapter (
		.clk                   (pll_0_outclk2_clk),                                                  //       cr0.clk
		.reset                 (videocard_new_0_reset_sink_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (videocard_new_0_memory_control_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (videocard_new_0_memory_control_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (videocard_new_0_memory_control_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (videocard_new_0_memory_control_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (videocard_new_0_memory_control_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (videocard_new_0_memory_control_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (videocard_new_0_memory_control_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (videocard_new_0_memory_control_burst_adapter_source0_data),          //          .data
		.source0_channel       (videocard_new_0_memory_control_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (videocard_new_0_memory_control_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (videocard_new_0_memory_control_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (videocard_new_0_memory_control_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_2_cmd_demux cmd_demux (
		.clk                (sys_pll_sys_clk_clk),                           //        clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (mm_bridge_0_m0_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel       (mm_bridge_0_m0_limiter_cmd_src_channel),        //           .channel
		.sink_data          (mm_bridge_0_m0_limiter_cmd_src_data),           //           .data
		.sink_startofpacket (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid         (mm_bridge_0_m0_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                          //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                          //           .valid
		.src0_data          (cmd_demux_src0_data),                           //           .data
		.src0_channel       (cmd_demux_src0_channel),                        //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                  //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                    //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                          //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                          //           .valid
		.src1_data          (cmd_demux_src1_data),                           //           .data
		.src1_channel       (cmd_demux_src1_channel),                        //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                  //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                    //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                          //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                          //           .valid
		.src2_data          (cmd_demux_src2_data),                           //           .data
		.src2_channel       (cmd_demux_src2_channel),                        //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                  //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                    //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                          //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                          //           .valid
		.src3_data          (cmd_demux_src3_data),                           //           .data
		.src3_channel       (cmd_demux_src3_channel),                        //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                  //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket)                     //           .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (pll_0_outclk0_clk),                           //       clk.clk
		.reset               (video_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_src_valid),                           //          .valid
		.src_data            (cmd_mux_src_data),                            //          .data
		.src_channel         (cmd_mux_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_out_ready),                           //     sink0.ready
		.sink0_valid         (crosser_out_valid),                           //          .valid
		.sink0_channel       (crosser_out_channel),                         //          .channel
		.sink0_data          (crosser_out_data),                            //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux_001 (
		.clk                 (pll_0_outclk0_clk),                           //       clk.clk
		.reset               (video_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                       //          .valid
		.src_data            (cmd_mux_001_src_data),                        //          .data
		.src_channel         (cmd_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                       //          .valid
		.sink0_channel       (crosser_001_out_channel),                     //          .channel
		.sink0_data          (crosser_001_out_data),                        //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux_002 (
		.clk                 (sys_pll_sys_clk_clk),                           //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                         //          .valid
		.src_data            (cmd_mux_002_src_data),                          //          .data
		.src_channel         (cmd_mux_002_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                        //          .channel
		.sink0_data          (cmd_demux_src2_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux_003 (
		.clk                 (pll_0_outclk2_clk),                                      //       clk.clk
		.reset               (videocard_new_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                  //          .valid
		.src_data            (cmd_mux_003_src_data),                                   //          .data
		.src_channel         (cmd_mux_003_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                                  //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                                  //          .valid
		.sink0_channel       (crosser_002_out_channel),                                //          .channel
		.sink0_data          (crosser_002_out_data),                                   //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux rsp_demux (
		.clk                (pll_0_outclk0_clk),                           //       clk.clk
		.reset              (video_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                        //      sink.ready
		.sink_channel       (router_001_src_channel),                      //          .channel
		.sink_data          (router_001_src_data),                         //          .data
		.sink_startofpacket (router_001_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_001_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_src0_data),                         //          .data
		.src0_channel       (rsp_demux_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux rsp_demux_001 (
		.clk                (pll_0_outclk0_clk),                           //       clk.clk
		.reset              (video_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                        //      sink.ready
		.sink_channel       (router_002_src_channel),                      //          .channel
		.sink_data          (router_002_src_data),                         //          .data
		.sink_startofpacket (router_002_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_002_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_001_src0_data),                     //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux rsp_demux_002 (
		.clk                (sys_pll_sys_clk_clk),                           //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                          //      sink.ready
		.sink_channel       (router_003_src_channel),                        //          .channel
		.sink_data          (router_003_src_data),                           //          .data
		.sink_startofpacket (router_003_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_003_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_002_src0_data),                       //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux_003 rsp_demux_003 (
		.clk                (pll_0_outclk2_clk),                                                  //       clk.clk
		.reset              (videocard_new_0_reset_sink_reset_bridge_in_reset_reset),             // clk_reset.reset
		.sink_ready         (videocard_new_0_memory_control_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (videocard_new_0_memory_control_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (videocard_new_0_memory_control_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (videocard_new_0_memory_control_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (videocard_new_0_memory_control_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (videocard_new_0_memory_control_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                           //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                           //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                            //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                         //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                                      //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_mux rsp_mux (
		.clk                 (sys_pll_sys_clk_clk),                           //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                             //       src.ready
		.src_valid           (rsp_mux_src_valid),                             //          .valid
		.src_data            (rsp_mux_src_data),                              //          .data
		.src_channel         (rsp_mux_src_channel),                           //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                         //          .valid
		.sink0_channel       (crosser_003_out_channel),                       //          .channel
		.sink0_data          (crosser_003_out_data),                          //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket),                   //          .endofpacket
		.sink1_ready         (crosser_004_out_ready),                         //     sink1.ready
		.sink1_valid         (crosser_004_out_valid),                         //          .valid
		.sink1_channel       (crosser_004_out_channel),                       //          .channel
		.sink1_data          (crosser_004_out_data),                          //          .data
		.sink1_startofpacket (crosser_004_out_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (crosser_004_out_endofpacket),                   //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                      //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                      //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                    //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                       //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                //          .endofpacket
		.sink3_ready         (crosser_005_out_ready),                         //     sink3.ready
		.sink3_valid         (crosser_005_out_valid),                         //          .valid
		.sink3_channel       (crosser_005_out_channel),                       //          .channel
		.sink3_data          (crosser_005_out_data),                          //          .data
		.sink3_startofpacket (crosser_005_out_startofpacket),                 //          .startofpacket
		.sink3_endofpacket   (crosser_005_out_endofpacket)                    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (28),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (37),
		.IN_PKT_BYTE_CNT_L             (35),
		.IN_PKT_TRANS_COMPRESSED_READ  (29),
		.IN_PKT_TRANS_WRITE            (31),
		.IN_PKT_BURSTWRAP_H            (38),
		.IN_PKT_BURSTWRAP_L            (38),
		.IN_PKT_BURST_SIZE_H           (41),
		.IN_PKT_BURST_SIZE_L           (39),
		.IN_PKT_RESPONSE_STATUS_H      (61),
		.IN_PKT_RESPONSE_STATUS_L      (60),
		.IN_PKT_TRANS_EXCLUSIVE        (34),
		.IN_PKT_BURST_TYPE_H           (43),
		.IN_PKT_BURST_TYPE_L           (42),
		.IN_PKT_ORI_BURST_SIZE_L       (62),
		.IN_PKT_ORI_BURST_SIZE_H       (64),
		.IN_ST_DATA_W                  (65),
		.OUT_PKT_ADDR_H                (55),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (62),
		.OUT_PKT_TRANS_COMPRESSED_READ (56),
		.OUT_PKT_BURST_SIZE_H          (68),
		.OUT_PKT_BURST_SIZE_L          (66),
		.OUT_PKT_RESPONSE_STATUS_H     (88),
		.OUT_PKT_RESPONSE_STATUS_L     (87),
		.OUT_PKT_TRANS_EXCLUSIVE       (61),
		.OUT_PKT_BURST_TYPE_H          (70),
		.OUT_PKT_BURST_TYPE_L          (69),
		.OUT_PKT_ORI_BURST_SIZE_L      (89),
		.OUT_PKT_ORI_BURST_SIZE_H      (91),
		.OUT_ST_DATA_W                 (92),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) videocard_new_0_memory_control_rsp_width_adapter (
		.clk                  (pll_0_outclk2_clk),                                                  //       clk.clk
		.reset                (videocard_new_0_reset_sink_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_valid             (router_004_src_valid),                                               //      sink.valid
		.in_channel           (router_004_src_channel),                                             //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                                         //          .endofpacket
		.in_ready             (router_004_src_ready),                                               //          .ready
		.in_data              (router_004_src_data),                                                //          .data
		.out_endofpacket      (videocard_new_0_memory_control_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (videocard_new_0_memory_control_rsp_width_adapter_src_data),          //          .data
		.out_channel          (videocard_new_0_memory_control_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (videocard_new_0_memory_control_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (videocard_new_0_memory_control_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (videocard_new_0_memory_control_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (55),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (62),
		.IN_PKT_TRANS_COMPRESSED_READ  (56),
		.IN_PKT_TRANS_WRITE            (58),
		.IN_PKT_BURSTWRAP_H            (65),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (68),
		.IN_PKT_BURST_SIZE_L           (66),
		.IN_PKT_RESPONSE_STATUS_H      (88),
		.IN_PKT_RESPONSE_STATUS_L      (87),
		.IN_PKT_TRANS_EXCLUSIVE        (61),
		.IN_PKT_BURST_TYPE_H           (70),
		.IN_PKT_BURST_TYPE_L           (69),
		.IN_PKT_ORI_BURST_SIZE_L       (89),
		.IN_PKT_ORI_BURST_SIZE_H       (91),
		.IN_ST_DATA_W                  (92),
		.OUT_PKT_ADDR_H                (28),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (37),
		.OUT_PKT_BYTE_CNT_L            (35),
		.OUT_PKT_TRANS_COMPRESSED_READ (29),
		.OUT_PKT_BURST_SIZE_H          (41),
		.OUT_PKT_BURST_SIZE_L          (39),
		.OUT_PKT_RESPONSE_STATUS_H     (61),
		.OUT_PKT_RESPONSE_STATUS_L     (60),
		.OUT_PKT_TRANS_EXCLUSIVE       (34),
		.OUT_PKT_BURST_TYPE_H          (43),
		.OUT_PKT_BURST_TYPE_L          (42),
		.OUT_PKT_ORI_BURST_SIZE_L      (62),
		.OUT_PKT_ORI_BURST_SIZE_H      (64),
		.OUT_ST_DATA_W                 (65),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) videocard_new_0_memory_control_cmd_width_adapter (
		.clk                  (pll_0_outclk2_clk),                                                  //       clk.clk
		.reset                (videocard_new_0_reset_sink_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                              //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                                            //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                                        //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                              //          .ready
		.in_data              (cmd_mux_003_src_data),                                               //          .data
		.out_endofpacket      (videocard_new_0_memory_control_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (videocard_new_0_memory_control_cmd_width_adapter_src_data),          //          .data
		.out_channel          (videocard_new_0_memory_control_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (videocard_new_0_memory_control_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (videocard_new_0_memory_control_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (videocard_new_0_memory_control_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (92),
		.BITS_PER_SYMBOL     (92),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (sys_pll_sys_clk_clk),                           //        in_clk.clk
		.in_reset          (mm_bridge_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                             //       out_clk.clk
		.out_reset         (video_dma_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                          //            in.ready
		.in_valid          (cmd_demux_src0_valid),                          //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                  //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                    //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                        //              .channel
		.in_data           (cmd_demux_src0_data),                           //              .data
		.out_ready         (crosser_out_ready),                             //           out.ready
		.out_valid         (crosser_out_valid),                             //              .valid
		.out_startofpacket (crosser_out_startofpacket),                     //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                       //              .endofpacket
		.out_channel       (crosser_out_channel),                           //              .channel
		.out_data          (crosser_out_data),                              //              .data
		.in_empty          (1'b0),                                          //   (terminated)
		.in_error          (1'b0),                                          //   (terminated)
		.out_empty         (),                                              //   (terminated)
		.out_error         ()                                               //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (92),
		.BITS_PER_SYMBOL     (92),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (sys_pll_sys_clk_clk),                           //        in_clk.clk
		.in_reset          (mm_bridge_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                             //       out_clk.clk
		.out_reset         (video_dma_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                          //            in.ready
		.in_valid          (cmd_demux_src1_valid),                          //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                  //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                    //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                        //              .channel
		.in_data           (cmd_demux_src1_data),                           //              .data
		.out_ready         (crosser_001_out_ready),                         //           out.ready
		.out_valid         (crosser_001_out_valid),                         //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                 //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                   //              .endofpacket
		.out_channel       (crosser_001_out_channel),                       //              .channel
		.out_data          (crosser_001_out_data),                          //              .data
		.in_empty          (1'b0),                                          //   (terminated)
		.in_error          (1'b0),                                          //   (terminated)
		.out_empty         (),                                              //   (terminated)
		.out_error         ()                                               //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (92),
		.BITS_PER_SYMBOL     (92),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (sys_pll_sys_clk_clk),                                    //        in_clk.clk
		.in_reset          (mm_bridge_0_reset_reset_bridge_in_reset_reset),          //  in_clk_reset.reset
		.out_clk           (pll_0_outclk2_clk),                                      //       out_clk.clk
		.out_reset         (videocard_new_0_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                   //            in.ready
		.in_valid          (cmd_demux_src3_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                                 //              .channel
		.in_data           (cmd_demux_src3_data),                                    //              .data
		.out_ready         (crosser_002_out_ready),                                  //           out.ready
		.out_valid         (crosser_002_out_valid),                                  //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                //              .channel
		.out_data          (crosser_002_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (92),
		.BITS_PER_SYMBOL     (92),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (pll_0_outclk0_clk),                             //        in_clk.clk
		.in_reset          (video_dma_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (sys_pll_sys_clk_clk),                           //       out_clk.clk
		.out_reset         (mm_bridge_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                          //            in.ready
		.in_valid          (rsp_demux_src0_valid),                          //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                  //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                    //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                        //              .channel
		.in_data           (rsp_demux_src0_data),                           //              .data
		.out_ready         (crosser_003_out_ready),                         //           out.ready
		.out_valid         (crosser_003_out_valid),                         //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                 //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                   //              .endofpacket
		.out_channel       (crosser_003_out_channel),                       //              .channel
		.out_data          (crosser_003_out_data),                          //              .data
		.in_empty          (1'b0),                                          //   (terminated)
		.in_error          (1'b0),                                          //   (terminated)
		.out_empty         (),                                              //   (terminated)
		.out_error         ()                                               //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (92),
		.BITS_PER_SYMBOL     (92),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (pll_0_outclk0_clk),                             //        in_clk.clk
		.in_reset          (video_dma_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (sys_pll_sys_clk_clk),                           //       out_clk.clk
		.out_reset         (mm_bridge_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                      //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                      //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),              //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                    //              .channel
		.in_data           (rsp_demux_001_src0_data),                       //              .data
		.out_ready         (crosser_004_out_ready),                         //           out.ready
		.out_valid         (crosser_004_out_valid),                         //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                 //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                   //              .endofpacket
		.out_channel       (crosser_004_out_channel),                       //              .channel
		.out_data          (crosser_004_out_data),                          //              .data
		.in_empty          (1'b0),                                          //   (terminated)
		.in_error          (1'b0),                                          //   (terminated)
		.out_empty         (),                                              //   (terminated)
		.out_error         ()                                               //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (92),
		.BITS_PER_SYMBOL     (92),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (pll_0_outclk2_clk),                                      //        in_clk.clk
		.in_reset          (videocard_new_0_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_pll_sys_clk_clk),                                    //       out_clk.clk
		.out_reset         (mm_bridge_0_reset_reset_bridge_in_reset_reset),          // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                             //              .channel
		.in_data           (rsp_demux_003_src0_data),                                //              .data
		.out_ready         (crosser_005_out_ready),                                  //           out.ready
		.out_valid         (crosser_005_out_valid),                                  //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                //              .channel
		.out_data          (crosser_005_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (video_dma_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (video_dma_avalon_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (video_dma_avalon_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (video_dma_avalon_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                              //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_dma_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                      //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (sys_pll_sys_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (dma_0_control_port_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_0_control_port_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_0_control_port_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_2_avalon_st_adapter_003 #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_0_outclk2_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (videocard_new_0_reset_sink_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (videocard_new_0_memory_control_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (videocard_new_0_memory_control_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (videocard_new_0_memory_control_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                          //         .error
	);

endmodule
