// soc_system_mm_interconnect_5.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.1 720

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_5 (
		input  wire        pll_0_outclk1_clk,                                      //                                    pll_0_outclk1.clk
		input  wire        pll_0_outclk3_clk,                                      //                                    pll_0_outclk3.clk
		input  wire        axi_master_bridge_reset_reset_bridge_in_reset_reset,    //    axi_master_bridge_reset_reset_bridge_in_reset.reset
		input  wire        videocard_new_0_reset_sink_reset_bridge_in_reset_reset, // videocard_new_0_reset_sink_reset_bridge_in_reset.reset
		input  wire [18:0] axi_master_bridge_m0_address,                           //                             axi_master_bridge_m0.address
		output wire        axi_master_bridge_m0_waitrequest,                       //                                                 .waitrequest
		input  wire [0:0]  axi_master_bridge_m0_burstcount,                        //                                                 .burstcount
		input  wire [3:0]  axi_master_bridge_m0_byteenable,                        //                                                 .byteenable
		input  wire        axi_master_bridge_m0_read,                              //                                                 .read
		output wire [31:0] axi_master_bridge_m0_readdata,                          //                                                 .readdata
		output wire        axi_master_bridge_m0_readdatavalid,                     //                                                 .readdatavalid
		input  wire        axi_master_bridge_m0_write,                             //                                                 .write
		input  wire [31:0] axi_master_bridge_m0_writedata,                         //                                                 .writedata
		input  wire        axi_master_bridge_m0_debugaccess,                       //                                                 .debugaccess
		output wire [16:0] videocard_new_0_memory_main_address,                    //                      videocard_new_0_memory_main.address
		output wire        videocard_new_0_memory_main_write,                      //                                                 .write
		output wire        videocard_new_0_memory_main_read,                       //                                                 .read
		input  wire [31:0] videocard_new_0_memory_main_readdata,                   //                                                 .readdata
		output wire [31:0] videocard_new_0_memory_main_writedata,                  //                                                 .writedata
		output wire [3:0]  videocard_new_0_memory_main_byteenable                  //                                                 .byteenable
	);

	wire         axi_master_bridge_m0_translator_avalon_universal_master_0_waitrequest;   // axi_master_bridge_m0_agent:av_waitrequest -> axi_master_bridge_m0_translator:uav_waitrequest
	wire  [31:0] axi_master_bridge_m0_translator_avalon_universal_master_0_readdata;      // axi_master_bridge_m0_agent:av_readdata -> axi_master_bridge_m0_translator:uav_readdata
	wire         axi_master_bridge_m0_translator_avalon_universal_master_0_debugaccess;   // axi_master_bridge_m0_translator:uav_debugaccess -> axi_master_bridge_m0_agent:av_debugaccess
	wire  [18:0] axi_master_bridge_m0_translator_avalon_universal_master_0_address;       // axi_master_bridge_m0_translator:uav_address -> axi_master_bridge_m0_agent:av_address
	wire         axi_master_bridge_m0_translator_avalon_universal_master_0_read;          // axi_master_bridge_m0_translator:uav_read -> axi_master_bridge_m0_agent:av_read
	wire   [3:0] axi_master_bridge_m0_translator_avalon_universal_master_0_byteenable;    // axi_master_bridge_m0_translator:uav_byteenable -> axi_master_bridge_m0_agent:av_byteenable
	wire         axi_master_bridge_m0_translator_avalon_universal_master_0_readdatavalid; // axi_master_bridge_m0_agent:av_readdatavalid -> axi_master_bridge_m0_translator:uav_readdatavalid
	wire         axi_master_bridge_m0_translator_avalon_universal_master_0_lock;          // axi_master_bridge_m0_translator:uav_lock -> axi_master_bridge_m0_agent:av_lock
	wire         axi_master_bridge_m0_translator_avalon_universal_master_0_write;         // axi_master_bridge_m0_translator:uav_write -> axi_master_bridge_m0_agent:av_write
	wire  [31:0] axi_master_bridge_m0_translator_avalon_universal_master_0_writedata;     // axi_master_bridge_m0_translator:uav_writedata -> axi_master_bridge_m0_agent:av_writedata
	wire   [2:0] axi_master_bridge_m0_translator_avalon_universal_master_0_burstcount;    // axi_master_bridge_m0_translator:uav_burstcount -> axi_master_bridge_m0_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                       // rsp_mux:src_valid -> axi_master_bridge_m0_agent:rp_valid
	wire  [88:0] rsp_mux_src_data;                                                        // rsp_mux:src_data -> axi_master_bridge_m0_agent:rp_data
	wire         rsp_mux_src_ready;                                                       // axi_master_bridge_m0_agent:rp_ready -> rsp_mux:src_ready
	wire   [0:0] rsp_mux_src_channel;                                                     // rsp_mux:src_channel -> axi_master_bridge_m0_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                               // rsp_mux:src_startofpacket -> axi_master_bridge_m0_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                                 // rsp_mux:src_endofpacket -> axi_master_bridge_m0_agent:rp_endofpacket
	wire  [31:0] videocard_new_0_memory_main_agent_m0_readdata;                           // videocard_new_0_memory_main_translator:uav_readdata -> videocard_new_0_memory_main_agent:m0_readdata
	wire         videocard_new_0_memory_main_agent_m0_waitrequest;                        // videocard_new_0_memory_main_translator:uav_waitrequest -> videocard_new_0_memory_main_agent:m0_waitrequest
	wire         videocard_new_0_memory_main_agent_m0_debugaccess;                        // videocard_new_0_memory_main_agent:m0_debugaccess -> videocard_new_0_memory_main_translator:uav_debugaccess
	wire  [18:0] videocard_new_0_memory_main_agent_m0_address;                            // videocard_new_0_memory_main_agent:m0_address -> videocard_new_0_memory_main_translator:uav_address
	wire   [3:0] videocard_new_0_memory_main_agent_m0_byteenable;                         // videocard_new_0_memory_main_agent:m0_byteenable -> videocard_new_0_memory_main_translator:uav_byteenable
	wire         videocard_new_0_memory_main_agent_m0_read;                               // videocard_new_0_memory_main_agent:m0_read -> videocard_new_0_memory_main_translator:uav_read
	wire         videocard_new_0_memory_main_agent_m0_readdatavalid;                      // videocard_new_0_memory_main_translator:uav_readdatavalid -> videocard_new_0_memory_main_agent:m0_readdatavalid
	wire         videocard_new_0_memory_main_agent_m0_lock;                               // videocard_new_0_memory_main_agent:m0_lock -> videocard_new_0_memory_main_translator:uav_lock
	wire  [31:0] videocard_new_0_memory_main_agent_m0_writedata;                          // videocard_new_0_memory_main_agent:m0_writedata -> videocard_new_0_memory_main_translator:uav_writedata
	wire         videocard_new_0_memory_main_agent_m0_write;                              // videocard_new_0_memory_main_agent:m0_write -> videocard_new_0_memory_main_translator:uav_write
	wire   [2:0] videocard_new_0_memory_main_agent_m0_burstcount;                         // videocard_new_0_memory_main_agent:m0_burstcount -> videocard_new_0_memory_main_translator:uav_burstcount
	wire         videocard_new_0_memory_main_agent_rf_source_valid;                       // videocard_new_0_memory_main_agent:rf_source_valid -> videocard_new_0_memory_main_agent_rsp_fifo:in_valid
	wire  [89:0] videocard_new_0_memory_main_agent_rf_source_data;                        // videocard_new_0_memory_main_agent:rf_source_data -> videocard_new_0_memory_main_agent_rsp_fifo:in_data
	wire         videocard_new_0_memory_main_agent_rf_source_ready;                       // videocard_new_0_memory_main_agent_rsp_fifo:in_ready -> videocard_new_0_memory_main_agent:rf_source_ready
	wire         videocard_new_0_memory_main_agent_rf_source_startofpacket;               // videocard_new_0_memory_main_agent:rf_source_startofpacket -> videocard_new_0_memory_main_agent_rsp_fifo:in_startofpacket
	wire         videocard_new_0_memory_main_agent_rf_source_endofpacket;                 // videocard_new_0_memory_main_agent:rf_source_endofpacket -> videocard_new_0_memory_main_agent_rsp_fifo:in_endofpacket
	wire         videocard_new_0_memory_main_agent_rsp_fifo_out_valid;                    // videocard_new_0_memory_main_agent_rsp_fifo:out_valid -> videocard_new_0_memory_main_agent:rf_sink_valid
	wire  [89:0] videocard_new_0_memory_main_agent_rsp_fifo_out_data;                     // videocard_new_0_memory_main_agent_rsp_fifo:out_data -> videocard_new_0_memory_main_agent:rf_sink_data
	wire         videocard_new_0_memory_main_agent_rsp_fifo_out_ready;                    // videocard_new_0_memory_main_agent:rf_sink_ready -> videocard_new_0_memory_main_agent_rsp_fifo:out_ready
	wire         videocard_new_0_memory_main_agent_rsp_fifo_out_startofpacket;            // videocard_new_0_memory_main_agent_rsp_fifo:out_startofpacket -> videocard_new_0_memory_main_agent:rf_sink_startofpacket
	wire         videocard_new_0_memory_main_agent_rsp_fifo_out_endofpacket;              // videocard_new_0_memory_main_agent_rsp_fifo:out_endofpacket -> videocard_new_0_memory_main_agent:rf_sink_endofpacket
	wire         videocard_new_0_memory_main_agent_rdata_fifo_src_valid;                  // videocard_new_0_memory_main_agent:rdata_fifo_src_valid -> videocard_new_0_memory_main_agent_rdata_fifo:in_valid
	wire  [33:0] videocard_new_0_memory_main_agent_rdata_fifo_src_data;                   // videocard_new_0_memory_main_agent:rdata_fifo_src_data -> videocard_new_0_memory_main_agent_rdata_fifo:in_data
	wire         videocard_new_0_memory_main_agent_rdata_fifo_src_ready;                  // videocard_new_0_memory_main_agent_rdata_fifo:in_ready -> videocard_new_0_memory_main_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_valid;                                                       // cmd_mux:src_valid -> videocard_new_0_memory_main_agent:cp_valid
	wire  [88:0] cmd_mux_src_data;                                                        // cmd_mux:src_data -> videocard_new_0_memory_main_agent:cp_data
	wire         cmd_mux_src_ready;                                                       // videocard_new_0_memory_main_agent:cp_ready -> cmd_mux:src_ready
	wire   [0:0] cmd_mux_src_channel;                                                     // cmd_mux:src_channel -> videocard_new_0_memory_main_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                               // cmd_mux:src_startofpacket -> videocard_new_0_memory_main_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                 // cmd_mux:src_endofpacket -> videocard_new_0_memory_main_agent:cp_endofpacket
	wire         axi_master_bridge_m0_agent_cp_valid;                                     // axi_master_bridge_m0_agent:cp_valid -> router:sink_valid
	wire  [88:0] axi_master_bridge_m0_agent_cp_data;                                      // axi_master_bridge_m0_agent:cp_data -> router:sink_data
	wire         axi_master_bridge_m0_agent_cp_ready;                                     // router:sink_ready -> axi_master_bridge_m0_agent:cp_ready
	wire         axi_master_bridge_m0_agent_cp_startofpacket;                             // axi_master_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         axi_master_bridge_m0_agent_cp_endofpacket;                               // axi_master_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                        // router:src_valid -> cmd_demux:sink_valid
	wire  [88:0] router_src_data;                                                         // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                        // cmd_demux:sink_ready -> router:src_ready
	wire   [0:0] router_src_channel;                                                      // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                                // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                                  // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         videocard_new_0_memory_main_agent_rp_valid;                              // videocard_new_0_memory_main_agent:rp_valid -> router_001:sink_valid
	wire  [88:0] videocard_new_0_memory_main_agent_rp_data;                               // videocard_new_0_memory_main_agent:rp_data -> router_001:sink_data
	wire         videocard_new_0_memory_main_agent_rp_ready;                              // router_001:sink_ready -> videocard_new_0_memory_main_agent:rp_ready
	wire         videocard_new_0_memory_main_agent_rp_startofpacket;                      // videocard_new_0_memory_main_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         videocard_new_0_memory_main_agent_rp_endofpacket;                        // videocard_new_0_memory_main_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                    // router_001:src_valid -> rsp_demux:sink_valid
	wire  [88:0] router_001_src_data;                                                     // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                                    // rsp_demux:sink_ready -> router_001:src_ready
	wire   [0:0] router_001_src_channel;                                                  // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                            // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                              // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         cmd_demux_src0_valid;                                                    // cmd_demux:src0_valid -> crosser:in_valid
	wire  [88:0] cmd_demux_src0_data;                                                     // cmd_demux:src0_data -> crosser:in_data
	wire         cmd_demux_src0_ready;                                                    // crosser:in_ready -> cmd_demux:src0_ready
	wire   [0:0] cmd_demux_src0_channel;                                                  // cmd_demux:src0_channel -> crosser:in_channel
	wire         cmd_demux_src0_startofpacket;                                            // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire         cmd_demux_src0_endofpacket;                                              // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire         crosser_out_valid;                                                       // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [88:0] crosser_out_data;                                                        // crosser:out_data -> cmd_mux:sink0_data
	wire         crosser_out_ready;                                                       // cmd_mux:sink0_ready -> crosser:out_ready
	wire   [0:0] crosser_out_channel;                                                     // crosser:out_channel -> cmd_mux:sink0_channel
	wire         crosser_out_startofpacket;                                               // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire         crosser_out_endofpacket;                                                 // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                    // rsp_demux:src0_valid -> crosser_001:in_valid
	wire  [88:0] rsp_demux_src0_data;                                                     // rsp_demux:src0_data -> crosser_001:in_data
	wire         rsp_demux_src0_ready;                                                    // crosser_001:in_ready -> rsp_demux:src0_ready
	wire   [0:0] rsp_demux_src0_channel;                                                  // rsp_demux:src0_channel -> crosser_001:in_channel
	wire         rsp_demux_src0_startofpacket;                                            // rsp_demux:src0_startofpacket -> crosser_001:in_startofpacket
	wire         rsp_demux_src0_endofpacket;                                              // rsp_demux:src0_endofpacket -> crosser_001:in_endofpacket
	wire         crosser_001_out_valid;                                                   // crosser_001:out_valid -> rsp_mux:sink0_valid
	wire  [88:0] crosser_001_out_data;                                                    // crosser_001:out_data -> rsp_mux:sink0_data
	wire         crosser_001_out_ready;                                                   // rsp_mux:sink0_ready -> crosser_001:out_ready
	wire   [0:0] crosser_001_out_channel;                                                 // crosser_001:out_channel -> rsp_mux:sink0_channel
	wire         crosser_001_out_startofpacket;                                           // crosser_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire         crosser_001_out_endofpacket;                                             // crosser_001:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire         videocard_new_0_memory_main_agent_rdata_fifo_out_valid;                  // videocard_new_0_memory_main_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] videocard_new_0_memory_main_agent_rdata_fifo_out_data;                   // videocard_new_0_memory_main_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire         videocard_new_0_memory_main_agent_rdata_fifo_out_ready;                  // avalon_st_adapter:in_0_ready -> videocard_new_0_memory_main_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_out_0_valid;                                           // avalon_st_adapter:out_0_valid -> videocard_new_0_memory_main_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                            // avalon_st_adapter:out_0_data -> videocard_new_0_memory_main_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                           // videocard_new_0_memory_main_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                           // avalon_st_adapter:out_0_error -> videocard_new_0_memory_main_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) axi_master_bridge_m0_translator (
		.clk                    (pll_0_outclk3_clk),                                                       //                       clk.clk
		.reset                  (axi_master_bridge_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (axi_master_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (axi_master_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (axi_master_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (axi_master_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (axi_master_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (axi_master_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (axi_master_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (axi_master_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (axi_master_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (axi_master_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (axi_master_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (axi_master_bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (axi_master_bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (axi_master_bridge_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (axi_master_bridge_m0_byteenable),                                         //                          .byteenable
		.av_read                (axi_master_bridge_m0_read),                                               //                          .read
		.av_readdata            (axi_master_bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (axi_master_bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (axi_master_bridge_m0_write),                                              //                          .write
		.av_writedata           (axi_master_bridge_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (axi_master_bridge_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                    //               (terminated)
		.av_lock                (1'b0),                                                                    //               (terminated)
		.uav_clken              (),                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                   //               (terminated)
		.av_response            (),                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                         //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (17),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) videocard_new_0_memory_main_translator (
		.clk                    (pll_0_outclk1_clk),                                      //                      clk.clk
		.reset                  (videocard_new_0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (videocard_new_0_memory_main_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (videocard_new_0_memory_main_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (videocard_new_0_memory_main_agent_m0_read),              //                         .read
		.uav_write              (videocard_new_0_memory_main_agent_m0_write),             //                         .write
		.uav_waitrequest        (videocard_new_0_memory_main_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (videocard_new_0_memory_main_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (videocard_new_0_memory_main_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (videocard_new_0_memory_main_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (videocard_new_0_memory_main_agent_m0_writedata),         //                         .writedata
		.uav_lock               (videocard_new_0_memory_main_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (videocard_new_0_memory_main_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (videocard_new_0_memory_main_address),                    //      avalon_anti_slave_0.address
		.av_write               (videocard_new_0_memory_main_write),                      //                         .write
		.av_read                (videocard_new_0_memory_main_read),                       //                         .read
		.av_readdata            (videocard_new_0_memory_main_readdata),                   //                         .readdata
		.av_writedata           (videocard_new_0_memory_main_writedata),                  //                         .writedata
		.av_byteenable          (videocard_new_0_memory_main_byteenable),                 //                         .byteenable
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_QOS_H                 (73),
		.PKT_QOS_L                 (73),
		.PKT_DATA_SIDEBAND_H       (71),
		.PKT_DATA_SIDEBAND_L       (71),
		.PKT_ADDR_SIDEBAND_H       (70),
		.PKT_ADDR_SIDEBAND_L       (70),
		.PKT_BURST_TYPE_H          (69),
		.PKT_BURST_TYPE_L          (68),
		.PKT_CACHE_H               (83),
		.PKT_CACHE_L               (80),
		.PKT_THREAD_ID_H           (76),
		.PKT_THREAD_ID_L           (76),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (75),
		.ST_DATA_W                 (89),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) axi_master_bridge_m0_agent (
		.clk                   (pll_0_outclk3_clk),                                                       //       clk.clk
		.reset                 (axi_master_bridge_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (axi_master_bridge_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (axi_master_bridge_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (axi_master_bridge_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (axi_master_bridge_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (axi_master_bridge_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (axi_master_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (axi_master_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (axi_master_bridge_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (axi_master_bridge_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (axi_master_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (axi_master_bridge_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (axi_master_bridge_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (axi_master_bridge_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (axi_master_bridge_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (axi_master_bridge_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (axi_master_bridge_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                       //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                        //          .data
		.rp_channel            (rsp_mux_src_channel),                                                     //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                 //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                       //          .ready
		.av_response           (),                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) videocard_new_0_memory_main_agent (
		.clk                     (pll_0_outclk1_clk),                                            //             clk.clk
		.reset                   (videocard_new_0_reset_sink_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (videocard_new_0_memory_main_agent_m0_address),                 //              m0.address
		.m0_burstcount           (videocard_new_0_memory_main_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (videocard_new_0_memory_main_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (videocard_new_0_memory_main_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (videocard_new_0_memory_main_agent_m0_lock),                    //                .lock
		.m0_readdata             (videocard_new_0_memory_main_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (videocard_new_0_memory_main_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (videocard_new_0_memory_main_agent_m0_read),                    //                .read
		.m0_waitrequest          (videocard_new_0_memory_main_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (videocard_new_0_memory_main_agent_m0_writedata),               //                .writedata
		.m0_write                (videocard_new_0_memory_main_agent_m0_write),                   //                .write
		.rp_endofpacket          (videocard_new_0_memory_main_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (videocard_new_0_memory_main_agent_rp_ready),                   //                .ready
		.rp_valid                (videocard_new_0_memory_main_agent_rp_valid),                   //                .valid
		.rp_data                 (videocard_new_0_memory_main_agent_rp_data),                    //                .data
		.rp_startofpacket        (videocard_new_0_memory_main_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                          //                .channel
		.rf_sink_ready           (videocard_new_0_memory_main_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (videocard_new_0_memory_main_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (videocard_new_0_memory_main_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (videocard_new_0_memory_main_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (videocard_new_0_memory_main_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (videocard_new_0_memory_main_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (videocard_new_0_memory_main_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (videocard_new_0_memory_main_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (videocard_new_0_memory_main_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (videocard_new_0_memory_main_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (videocard_new_0_memory_main_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (videocard_new_0_memory_main_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (videocard_new_0_memory_main_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) videocard_new_0_memory_main_agent_rsp_fifo (
		.clk               (pll_0_outclk1_clk),                                            //       clk.clk
		.reset             (videocard_new_0_reset_sink_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (videocard_new_0_memory_main_agent_rf_source_data),             //        in.data
		.in_valid          (videocard_new_0_memory_main_agent_rf_source_valid),            //          .valid
		.in_ready          (videocard_new_0_memory_main_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (videocard_new_0_memory_main_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (videocard_new_0_memory_main_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (videocard_new_0_memory_main_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (videocard_new_0_memory_main_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (videocard_new_0_memory_main_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (videocard_new_0_memory_main_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (videocard_new_0_memory_main_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) videocard_new_0_memory_main_agent_rdata_fifo (
		.clk               (pll_0_outclk1_clk),                                      //       clk.clk
		.reset             (videocard_new_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (videocard_new_0_memory_main_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (videocard_new_0_memory_main_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (videocard_new_0_memory_main_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (videocard_new_0_memory_main_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (videocard_new_0_memory_main_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (videocard_new_0_memory_main_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	soc_system_mm_interconnect_5_router router (
		.sink_ready         (axi_master_bridge_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (axi_master_bridge_m0_agent_cp_valid),                 //          .valid
		.sink_data          (axi_master_bridge_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (axi_master_bridge_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (axi_master_bridge_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (pll_0_outclk3_clk),                                   //       clk.clk
		.reset              (axi_master_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                    //       src.ready
		.src_valid          (router_src_valid),                                    //          .valid
		.src_data           (router_src_data),                                     //          .data
		.src_channel        (router_src_channel),                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                               //          .endofpacket
	);

	soc_system_mm_interconnect_5_router_001 router_001 (
		.sink_ready         (videocard_new_0_memory_main_agent_rp_ready),             //      sink.ready
		.sink_valid         (videocard_new_0_memory_main_agent_rp_valid),             //          .valid
		.sink_data          (videocard_new_0_memory_main_agent_rp_data),              //          .data
		.sink_startofpacket (videocard_new_0_memory_main_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (videocard_new_0_memory_main_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_0_outclk1_clk),                                      //       clk.clk
		.reset              (videocard_new_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //       src.ready
		.src_valid          (router_001_src_valid),                                   //          .valid
		.src_data           (router_001_src_data),                                    //          .data
		.src_channel        (router_001_src_channel),                                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_5_cmd_demux cmd_demux (
		.clk                (pll_0_outclk3_clk),                                   //       clk.clk
		.reset              (axi_master_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                    //      sink.ready
		.sink_channel       (router_src_channel),                                  //          .channel
		.sink_data          (router_src_data),                                     //          .data
		.sink_startofpacket (router_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_src_valid),                                    //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                //          .valid
		.src0_data          (cmd_demux_src0_data),                                 //          .data
		.src0_channel       (cmd_demux_src0_channel),                              //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_5_cmd_mux cmd_mux (
		.clk                 (pll_0_outclk1_clk),                                      //       clk.clk
		.reset               (videocard_new_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_src_valid),                                      //          .valid
		.src_data            (cmd_mux_src_data),                                       //          .data
		.src_channel         (cmd_mux_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                      //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                      //          .valid
		.sink0_channel       (crosser_out_channel),                                    //          .channel
		.sink0_data          (crosser_out_data),                                       //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                 //          .endofpacket
	);

	soc_system_mm_interconnect_5_rsp_demux rsp_demux (
		.clk                (pll_0_outclk1_clk),                                      //       clk.clk
		.reset              (videocard_new_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                   //      sink.ready
		.sink_channel       (router_001_src_channel),                                 //          .channel
		.sink_data          (router_001_src_data),                                    //          .data
		.sink_startofpacket (router_001_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_001_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_5_rsp_mux rsp_mux (
		.clk                 (pll_0_outclk3_clk),                                   //       clk.clk
		.reset               (axi_master_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_src_valid),                                   //          .valid
		.src_data            (rsp_mux_src_data),                                    //          .data
		.src_channel         (rsp_mux_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                               //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                               //          .valid
		.sink0_channel       (crosser_001_out_channel),                             //          .channel
		.sink0_data          (crosser_001_out_data),                                //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                          //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (89),
		.BITS_PER_SYMBOL     (89),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (pll_0_outclk3_clk),                                      //        in_clk.clk
		.in_reset          (axi_master_bridge_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                      //       out_clk.clk
		.out_reset         (videocard_new_0_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                   //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                 //              .channel
		.in_data           (cmd_demux_src0_data),                                    //              .data
		.out_ready         (crosser_out_ready),                                      //           out.ready
		.out_valid         (crosser_out_valid),                                      //              .valid
		.out_startofpacket (crosser_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_out_channel),                                    //              .channel
		.out_data          (crosser_out_data),                                       //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (89),
		.BITS_PER_SYMBOL     (89),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (pll_0_outclk1_clk),                                      //        in_clk.clk
		.in_reset          (videocard_new_0_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk3_clk),                                      //       out_clk.clk
		.out_reset         (axi_master_bridge_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                   //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                   //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                             //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                 //              .channel
		.in_data           (rsp_demux_src0_data),                                    //              .data
		.out_ready         (crosser_001_out_ready),                                  //           out.ready
		.out_valid         (crosser_001_out_valid),                                  //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                //              .channel
		.out_data          (crosser_001_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_0_outclk1_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (videocard_new_0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (videocard_new_0_memory_main_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (videocard_new_0_memory_main_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (videocard_new_0_memory_main_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

endmodule
