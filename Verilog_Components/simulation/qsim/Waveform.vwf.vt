// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/02/2021 19:23:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Components
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Components_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [22:0] adress;
reg clock_reference;
reg clock_reset;
reg [7:0] treg_data;
reg vga_reset;
reg wren;
// wires                                               
wire [4:0] blue;
wire [7:0] data;
wire [4:0] green;
wire hsync;
wire p_tick;
wire [5:0] red;
wire vsync;

// assign statements (if any)                          
assign data = treg_data;
Components i1 (
// port map - connection between master ports and signals/registers   
	.adress(adress),
	.blue(blue),
	.clock_reference(clock_reference),
	.clock_reset(clock_reset),
	.data(data),
	.green(green),
	.hsync(hsync),
	.p_tick(p_tick),
	.red(red),
	.vga_reset(vga_reset),
	.vsync(vsync),
	.wren(wren)
);
initial 
begin 
#1000000 $finish;
end 
// adress[ 22 ]
initial
begin
	adress[22] = 1'b0;
end 
// adress[ 21 ]
initial
begin
	adress[21] = 1'b0;
end 
// adress[ 20 ]
initial
begin
	adress[20] = 1'b0;
end 
// adress[ 19 ]
initial
begin
	adress[19] = 1'b0;
end 
// adress[ 18 ]
initial
begin
	adress[18] = 1'b1;
end 
// adress[ 17 ]
initial
begin
	adress[17] = 1'b0;
end 
// adress[ 16 ]
initial
begin
	adress[16] = 1'b0;
end 
// adress[ 15 ]
initial
begin
	adress[15] = 1'b0;
end 
// adress[ 14 ]
initial
begin
	adress[14] = 1'b0;
end 
// adress[ 13 ]
initial
begin
	adress[13] = 1'b1;
end 
// adress[ 12 ]
initial
begin
	adress[12] = 1'b0;
end 
// adress[ 11 ]
initial
begin
	adress[11] = 1'b0;
end 
// adress[ 10 ]
initial
begin
	adress[10] = 1'b0;
end 
// adress[ 9 ]
initial
begin
	adress[9] = 1'b0;
end 
// adress[ 8 ]
initial
begin
	adress[8] = 1'b0;
end 
// adress[ 7 ]
initial
begin
	adress[7] = 1'b0;
end 
// adress[ 6 ]
initial
begin
	adress[6] = 1'b0;
end 
// adress[ 5 ]
initial
begin
	adress[5] = 1'b0;
end 
// adress[ 4 ]
initial
begin
	adress[4] = 1'b0;
end 
// adress[ 3 ]
initial
begin
	adress[3] = 1'b1;
end 
// adress[ 2 ]
initial
begin
	adress[2] = 1'b0;
end 
// adress[ 1 ]
initial
begin
	adress[1] = 1'b0;
end 
// adress[ 0 ]
initial
begin
	adress[0] = 1'b0;
end 

// clock_reference
always
begin
	clock_reference = 1'b0;
	clock_reference = #10000 1'b1;
	#10000;
end 

// clock_reset
initial
begin
	clock_reset = 1'b0;
end 
// data[ 7 ]
initial
begin
	treg_data[7] = 1'b1;
end 
// data[ 6 ]
initial
begin
	treg_data[6] = 1'b0;
end 
// data[ 5 ]
initial
begin
	treg_data[5] = 1'b1;
end 
// data[ 4 ]
initial
begin
	treg_data[4] = 1'b0;
end 
// data[ 3 ]
initial
begin
	treg_data[3] = 1'b1;
end 
// data[ 2 ]
initial
begin
	treg_data[2] = 1'b1;
end 
// data[ 1 ]
initial
begin
	treg_data[1] = 1'b1;
end 
// data[ 0 ]
initial
begin
	treg_data[0] = 1'b0;
end 

// vga_reset
initial
begin
	vga_reset = 1'b0;
end 

// wren
initial
begin
	wren = 1'b0;
end 
endmodule

