stack_size 1000 1000 1000 1000
movimm reg0 4
load reg1 reg0
push reg1
dec reg0

load reg1 reg0
push reg1
dec reg0

load reg1 reg0
push reg1
dec reg0

load reg1 reg0
push reg1
dec reg0

load reg1 reg0
push reg1

call MULTIPLY

int 1


MULTIPLY:

//  param1 address of first matrix//                [reg4 - 3]
//  param2 address of second matrix transposed      [reg4 - 4]
//  param3 width//                                  [reg4 - 5]
//  param4 address of start of destination matrix// [reg4 - 6]
//  param5 height                                   [reg4 - 7]

    push reg4
    mov reg4 reg6

    add reg6 5

    Istep=0
    IIIstep=1
    IIIstart=2
    heightInner=3
    heightOutter=4
    IIstart=6
    Istart=7
    // Istep                          [reg4 + 0]
    // IIIstep                        [reg4 + 1]
    // address of destination matrix  [reg4 + 2]
    // height  (inner loop)           [reg4 + 3]
    // height  (outer loop)           [reg4 + 4]

    // reg0 = width, reg1 = height, reg2 = address of first matrix
    load_macro reg0 -5
    load_macro reg1 -7
    load_macro reg2 -3
    // push param3 of DOT_PRODUCT
    push reg0

    // store height in [reg4 + 3]
    store_macro reg1 $heightInner
    
    // decrease overall height for each core
    coreidx reg5
    sub reg1 reg5
    sub reg1 $CORE_NUM

    // store height in [reg4 + 4]
    store_macro reg1 $heightOutter


    // reg3 = Istep
    movimm reg3 $CORE_NUM
    mul reg3 reg0
    store_macro reg3 $Istep

    // calculate and store step for dest matrix
    load_macro reg1 -7
    movimm reg3 $CORE_NUM
    // decrease step by one row since INNER_LOOP also updates dest pointer
    dec reg3
    mul reg3 reg1
    store_macro reg3 $IIIstep 

    // reg1 = start address of dest matrix
    load_macro reg1 -6

    coreidx reg5
    
    // reg0 = width * coreId
    mul reg0 reg5

    // shift start of first matrix
    add reg2 reg0

    load_macro reg3 $heightInner
    coreidx reg5

    mul reg5 reg3
    // shift start of dest matrix
    add reg1 reg5

    // [reg4 + 2] = shifted start address of dest matrix
    store_macro reg1 $IIIstart

    // push param2 of DOT_PRODUCT
    load_macro reg0 -4
    push reg0

    // push param1 of DOT_PRODUCT
    push reg2


INNER_LOOP:

    call DOT_PRODUCT

    // store result of dot product into matrix
    load_macro reg2 $IIIstart
    store reg0 reg2

    // increment pointer of destination matrix
    inc reg2
    store_macro reg2 $IIIstart

    // load width
    load_macro reg1 -5

    // load current pointer of second matrix
    load_macro reg2 $IIstart

    // update it with width
    add reg2 reg1
    store_macro reg2 $IIstart

    load_macro reg0 $heightInner
    dec reg0
    je OUTER_LOOP
    store_macro reg0 $heightInner
    jmp INNER_LOOP
    // xor reg5 reg5
    // cmp reg0 reg5
    // jne INNER_LOOP


OUTER_LOOP:

    // end pointer

    load_macro reg0 $heightOutter
    xor reg1 reg1
    cmp reg0 reg1
    jle END

    sub reg0 $CORE_NUM
    store_macro reg0 $heightOutter

    // load current first matrix pointer
    load_macro reg1 $Istart
    // load Istep
    load_macro reg2 $Istep

    add reg1 reg2

    // store updated pointer to first matrix
    store_macro reg1 $Istart

    // load current dest matrix pointer
    load_macro reg1 $IIIstart
    load_macro reg2 $IIIstep
    // add IIIstep
    add reg1 reg2

    // store updated pointer to dest matrix
    store_macro reg1 $IIIstart

    // load height copy in to height
    load_macro reg2 -7
    store_macro reg2 $heightInner

    // load address of second matrix from arguments
    load_macro reg3 -4
    store_macro reg3 $IIstart

    jmp INNER_LOOP

END:
    sub reg6 8
    pop reg4
    ret


DOT_PRODUCT:
//  param1 adress of first vector//    [reg4 - 3]
//  param2 adress of second vector//   [reg4 - 4]
//  param3 size of vectors//           [reg4 - 5]
    //  create function call frame
    push reg4
    mov reg4 reg6

    //  reg1 address of second vector
    //  reg2 last index of vectors
    //  reg0 address of first vector
    load_macro reg0 -3
    load_macro reg1 -4
    load_macro reg2 -5



    //  use reg4 as accumulative register
    movimm reg4 0

LOOP:
    //  load value from first vector at index current index
    load reg3 reg0
    //  load value from second vector at index current index
    load reg5 reg1

    mul reg3 reg5


    //  sum up
    add reg4 reg3

    //  move pointer forward
    inc reg0
    inc reg1

    //  count down
    dec reg2
    jne LOOP

    //  store dot product into reg0
    mov reg0 reg4

    // restore prevoius base pointer
    pop reg4

    ret



// 75
// end of first matrix
// mul reg1 reg0 // width * height
// add reg1 reg2 // width * height + start address
// store_macro reg1 $Iend